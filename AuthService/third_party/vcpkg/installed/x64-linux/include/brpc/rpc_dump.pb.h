// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/rpc_dump.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2frpc_5fdump_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2frpc_5fdump_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2frpc_5fdump_2eproto;
namespace brpc {
class RpcDumpMeta;
struct RpcDumpMetaDefaultTypeInternal;
extern RpcDumpMetaDefaultTypeInternal _RpcDumpMeta_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {

// ===================================================================


// -------------------------------------------------------------------

class RpcDumpMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.RpcDumpMeta) */ {
 public:
  inline RpcDumpMeta() : RpcDumpMeta(nullptr) {}
  ~RpcDumpMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcDumpMeta(::google::protobuf::internal::ConstantInitialized);

  inline RpcDumpMeta(const RpcDumpMeta& from)
      : RpcDumpMeta(nullptr, from) {}
  RpcDumpMeta(RpcDumpMeta&& from) noexcept
    : RpcDumpMeta() {
    *this = ::std::move(from);
  }

  inline RpcDumpMeta& operator=(const RpcDumpMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcDumpMeta& operator=(RpcDumpMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcDumpMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcDumpMeta* internal_default_instance() {
    return reinterpret_cast<const RpcDumpMeta*>(
               &_RpcDumpMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcDumpMeta& a, RpcDumpMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcDumpMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcDumpMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcDumpMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcDumpMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcDumpMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RpcDumpMeta& from) {
    RpcDumpMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpcDumpMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.RpcDumpMeta";
  }
  protected:
  explicit RpcDumpMeta(::google::protobuf::Arena* arena);
  RpcDumpMeta(::google::protobuf::Arena* arena, const RpcDumpMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kAuthenticationDataFieldNumber = 7,
    kUserDataFieldNumber = 8,
    kNsheadFieldNumber = 9,
    kMethodIndexFieldNumber = 3,
    kCompressTypeFieldNumber = 4,
    kProtocolTypeFieldNumber = 5,
    kAttachmentSizeFieldNumber = 6,
  };
  // optional string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // optional string method_name = 2;
  bool has_method_name() const;
  void clear_method_name() ;
  const std::string& method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* value);

  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(
      const std::string& value);
  std::string* _internal_mutable_method_name();

  public:
  // optional bytes authentication_data = 7;
  bool has_authentication_data() const;
  void clear_authentication_data() ;
  const std::string& authentication_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authentication_data(Arg_&& arg, Args_... args);
  std::string* mutable_authentication_data();
  PROTOBUF_NODISCARD std::string* release_authentication_data();
  void set_allocated_authentication_data(std::string* value);

  private:
  const std::string& _internal_authentication_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authentication_data(
      const std::string& value);
  std::string* _internal_mutable_authentication_data();

  public:
  // optional bytes user_data = 8;
  bool has_user_data() const;
  void clear_user_data() ;
  const std::string& user_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_data(Arg_&& arg, Args_... args);
  std::string* mutable_user_data();
  PROTOBUF_NODISCARD std::string* release_user_data();
  void set_allocated_user_data(std::string* value);

  private:
  const std::string& _internal_user_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_data(
      const std::string& value);
  std::string* _internal_mutable_user_data();

  public:
  // optional bytes nshead = 9;
  bool has_nshead() const;
  void clear_nshead() ;
  const std::string& nshead() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nshead(Arg_&& arg, Args_... args);
  std::string* mutable_nshead();
  PROTOBUF_NODISCARD std::string* release_nshead();
  void set_allocated_nshead(std::string* value);

  private:
  const std::string& _internal_nshead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nshead(
      const std::string& value);
  std::string* _internal_mutable_nshead();

  public:
  // optional int32 method_index = 3;
  bool has_method_index() const;
  void clear_method_index() ;
  ::int32_t method_index() const;
  void set_method_index(::int32_t value);

  private:
  ::int32_t _internal_method_index() const;
  void _internal_set_method_index(::int32_t value);

  public:
  // optional .brpc.CompressType compress_type = 4;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::brpc::CompressType compress_type() const;
  void set_compress_type(::brpc::CompressType value);

  private:
  ::brpc::CompressType _internal_compress_type() const;
  void _internal_set_compress_type(::brpc::CompressType value);

  public:
  // optional .brpc.ProtocolType protocol_type = 5;
  bool has_protocol_type() const;
  void clear_protocol_type() ;
  ::brpc::ProtocolType protocol_type() const;
  void set_protocol_type(::brpc::ProtocolType value);

  private:
  ::brpc::ProtocolType _internal_protocol_type() const;
  void _internal_set_protocol_type(::brpc::ProtocolType value);

  public:
  // optional int32 attachment_size = 6;
  bool has_attachment_size() const;
  void clear_attachment_size() ;
  ::int32_t attachment_size() const;
  void set_attachment_size(::int32_t value);

  private:
  ::int32_t _internal_attachment_size() const;
  void _internal_set_attachment_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.RpcDumpMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr method_name_;
    ::google::protobuf::internal::ArenaStringPtr authentication_data_;
    ::google::protobuf::internal::ArenaStringPtr user_data_;
    ::google::protobuf::internal::ArenaStringPtr nshead_;
    ::int32_t method_index_;
    int compress_type_;
    int protocol_type_;
    ::int32_t attachment_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2frpc_5fdump_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpcDumpMeta

// optional string service_name = 1;
inline bool RpcDumpMeta::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcDumpMeta::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcDumpMeta::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.service_name)
}
inline std::string* RpcDumpMeta::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.service_name)
  return _s;
}
inline const std::string& RpcDumpMeta::_internal_service_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_name_.Get();
}
inline void RpcDumpMeta::_internal_set_service_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* RpcDumpMeta::_internal_mutable_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* RpcDumpMeta::release_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcDumpMeta::set_allocated_service_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.service_name)
}

// optional string method_name = 2;
inline bool RpcDumpMeta::has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcDumpMeta::method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.method_name)
  return _internal_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcDumpMeta::set_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.method_name)
}
inline std::string* RpcDumpMeta::mutable_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.method_name)
  return _s;
}
inline const std::string& RpcDumpMeta::_internal_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_name_.Get();
}
inline void RpcDumpMeta::_internal_set_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(value, GetArena());
}
inline std::string* RpcDumpMeta::_internal_mutable_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_name_.Mutable( GetArena());
}
inline std::string* RpcDumpMeta::release_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.method_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcDumpMeta::set_allocated_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_name_.IsDefault()) {
          _impl_.method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.method_name)
}

// optional int32 method_index = 3;
inline bool RpcDumpMeta::has_method_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_method_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t RpcDumpMeta::method_index() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.method_index)
  return _internal_method_index();
}
inline void RpcDumpMeta::set_method_index(::int32_t value) {
  _internal_set_method_index(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.method_index)
}
inline ::int32_t RpcDumpMeta::_internal_method_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_index_;
}
inline void RpcDumpMeta::_internal_set_method_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.method_index_ = value;
}

// optional .brpc.CompressType compress_type = 4;
inline bool RpcDumpMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::brpc::CompressType RpcDumpMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.compress_type)
  return _internal_compress_type();
}
inline void RpcDumpMeta::set_compress_type(::brpc::CompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.compress_type)
}
inline ::brpc::CompressType RpcDumpMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::CompressType>(_impl_.compress_type_);
}
inline void RpcDumpMeta::_internal_set_compress_type(::brpc::CompressType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::CompressType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.compress_type_ = value;
}

// optional .brpc.ProtocolType protocol_type = 5;
inline bool RpcDumpMeta::has_protocol_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_protocol_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::ProtocolType RpcDumpMeta::protocol_type() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.protocol_type)
  return _internal_protocol_type();
}
inline void RpcDumpMeta::set_protocol_type(::brpc::ProtocolType value) {
  _internal_set_protocol_type(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.protocol_type)
}
inline ::brpc::ProtocolType RpcDumpMeta::_internal_protocol_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::ProtocolType>(_impl_.protocol_type_);
}
inline void RpcDumpMeta::_internal_set_protocol_type(::brpc::ProtocolType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::ProtocolType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.protocol_type_ = value;
}

// optional int32 attachment_size = 6;
inline bool RpcDumpMeta::has_attachment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_attachment_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attachment_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t RpcDumpMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.attachment_size)
  return _internal_attachment_size();
}
inline void RpcDumpMeta::set_attachment_size(::int32_t value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.attachment_size)
}
inline ::int32_t RpcDumpMeta::_internal_attachment_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attachment_size_;
}
inline void RpcDumpMeta::_internal_set_attachment_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.attachment_size_ = value;
}

// optional bytes authentication_data = 7;
inline bool RpcDumpMeta::has_authentication_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.authentication_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcDumpMeta::authentication_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.authentication_data)
  return _internal_authentication_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcDumpMeta::set_authentication_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.authentication_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.authentication_data)
}
inline std::string* RpcDumpMeta::mutable_authentication_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_authentication_data();
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.authentication_data)
  return _s;
}
inline const std::string& RpcDumpMeta::_internal_authentication_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.authentication_data_.Get();
}
inline void RpcDumpMeta::_internal_set_authentication_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.authentication_data_.Set(value, GetArena());
}
inline std::string* RpcDumpMeta::_internal_mutable_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.authentication_data_.Mutable( GetArena());
}
inline std::string* RpcDumpMeta::release_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.authentication_data)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.authentication_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authentication_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcDumpMeta::set_allocated_authentication_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.authentication_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authentication_data_.IsDefault()) {
          _impl_.authentication_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.authentication_data)
}

// optional bytes user_data = 8;
inline bool RpcDumpMeta::has_user_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RpcDumpMeta::user_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.user_data)
  return _internal_user_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcDumpMeta::set_user_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.user_data)
}
inline std::string* RpcDumpMeta::mutable_user_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_data();
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.user_data)
  return _s;
}
inline const std::string& RpcDumpMeta::_internal_user_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_data_.Get();
}
inline void RpcDumpMeta::_internal_set_user_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_data_.Set(value, GetArena());
}
inline std::string* RpcDumpMeta::_internal_mutable_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.user_data_.Mutable( GetArena());
}
inline std::string* RpcDumpMeta::release_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.user_data)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.user_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcDumpMeta::set_allocated_user_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.user_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_data_.IsDefault()) {
          _impl_.user_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.user_data)
}

// optional bytes nshead = 9;
inline bool RpcDumpMeta::has_nshead() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RpcDumpMeta::clear_nshead() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nshead_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RpcDumpMeta::nshead() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.nshead)
  return _internal_nshead();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcDumpMeta::set_nshead(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nshead_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.nshead)
}
inline std::string* RpcDumpMeta::mutable_nshead() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nshead();
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.nshead)
  return _s;
}
inline const std::string& RpcDumpMeta::_internal_nshead() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nshead_.Get();
}
inline void RpcDumpMeta::_internal_set_nshead(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nshead_.Set(value, GetArena());
}
inline std::string* RpcDumpMeta::_internal_mutable_nshead() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.nshead_.Mutable( GetArena());
}
inline std::string* RpcDumpMeta::release_nshead() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.nshead)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.nshead_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nshead_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcDumpMeta::set_allocated_nshead(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.nshead_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nshead_.IsDefault()) {
          _impl_.nshead_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.nshead)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto_2epb_2eh
