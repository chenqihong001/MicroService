// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fmongo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fmongo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fpolicy_2fmongo_2eproto;
namespace brpc {
namespace policy {
class MongoHeader;
struct MongoHeaderDefaultTypeInternal;
extern MongoHeaderDefaultTypeInternal _MongoHeader_default_instance_;
class MongoRequest;
struct MongoRequestDefaultTypeInternal;
extern MongoRequestDefaultTypeInternal _MongoRequest_default_instance_;
class MongoResponse;
struct MongoResponseDefaultTypeInternal;
extern MongoResponseDefaultTypeInternal _MongoResponse_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
namespace policy {
enum MongoOp : int {
  OPREPLY = 1,
  DBMSG = 1000,
  DB_UPDATE = 2001,
  DB_INSERT = 2002,
  DB_QUERY = 2004,
  DB_GETMORE = 2005,
  DB_DELETE = 2006,
  DB_KILLCURSORS = 2007,
  DB_COMMAND = 2008,
  DB_COMMANDREPLY = 2009,
};

bool MongoOp_IsValid(int value);
extern const uint32_t MongoOp_internal_data_[];
constexpr MongoOp MongoOp_MIN = static_cast<MongoOp>(1);
constexpr MongoOp MongoOp_MAX = static_cast<MongoOp>(2009);
constexpr int MongoOp_ARRAYSIZE = 2009 + 1;
const ::google::protobuf::EnumDescriptor*
MongoOp_descriptor();
template <typename T>
const std::string& MongoOp_Name(T value) {
  static_assert(std::is_same<T, MongoOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MongoOp_Name().");
  return ::google::protobuf::internal::NameOfEnum(MongoOp_descriptor(), value);
}
inline bool MongoOp_Parse(absl::string_view name, MongoOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MongoOp>(
      MongoOp_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MongoHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoHeader) */ {
 public:
  inline MongoHeader() : MongoHeader(nullptr) {}
  ~MongoHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MongoHeader(::google::protobuf::internal::ConstantInitialized);

  inline MongoHeader(const MongoHeader& from)
      : MongoHeader(nullptr, from) {}
  MongoHeader(MongoHeader&& from) noexcept
    : MongoHeader() {
    *this = ::std::move(from);
  }

  inline MongoHeader& operator=(const MongoHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoHeader& operator=(MongoHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoHeader* internal_default_instance() {
    return reinterpret_cast<const MongoHeader*>(
               &_MongoHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MongoHeader& a, MongoHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MongoHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MongoHeader& from) {
    MongoHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MongoHeader* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.MongoHeader";
  }
  protected:
  explicit MongoHeader(::google::protobuf::Arena* arena);
  MongoHeader(::google::protobuf::Arena* arena, const MongoHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageLengthFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kResponseToFieldNumber = 3,
    kOpCodeFieldNumber = 4,
  };
  // required int32 message_length = 1;
  bool has_message_length() const;
  void clear_message_length() ;
  ::int32_t message_length() const;
  void set_message_length(::int32_t value);

  private:
  ::int32_t _internal_message_length() const;
  void _internal_set_message_length(::int32_t value);

  public:
  // required int32 request_id = 2;
  bool has_request_id() const;
  void clear_request_id() ;
  ::int32_t request_id() const;
  void set_request_id(::int32_t value);

  private:
  ::int32_t _internal_request_id() const;
  void _internal_set_request_id(::int32_t value);

  public:
  // required int32 response_to = 3;
  bool has_response_to() const;
  void clear_response_to() ;
  ::int32_t response_to() const;
  void set_response_to(::int32_t value);

  private:
  ::int32_t _internal_response_to() const;
  void _internal_set_response_to(::int32_t value);

  public:
  // required .brpc.policy.MongoOp op_code = 4;
  bool has_op_code() const;
  void clear_op_code() ;
  ::brpc::policy::MongoOp op_code() const;
  void set_op_code(::brpc::policy::MongoOp value);

  private:
  ::brpc::policy::MongoOp _internal_op_code() const;
  void _internal_set_op_code(::brpc::policy::MongoOp value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.MongoHeader)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t message_length_;
    ::int32_t request_id_;
    ::int32_t response_to_;
    int op_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};// -------------------------------------------------------------------

class MongoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoResponse) */ {
 public:
  inline MongoResponse() : MongoResponse(nullptr) {}
  ~MongoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MongoResponse(::google::protobuf::internal::ConstantInitialized);

  inline MongoResponse(const MongoResponse& from)
      : MongoResponse(nullptr, from) {}
  MongoResponse(MongoResponse&& from) noexcept
    : MongoResponse() {
    *this = ::std::move(from);
  }

  inline MongoResponse& operator=(const MongoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoResponse& operator=(MongoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoResponse* internal_default_instance() {
    return reinterpret_cast<const MongoResponse*>(
               &_MongoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MongoResponse& a, MongoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MongoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MongoResponse& from) {
    MongoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MongoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.MongoResponse";
  }
  protected:
  explicit MongoResponse(::google::protobuf::Arena* arena);
  MongoResponse(::google::protobuf::Arena* arena, const MongoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kCursorIdFieldNumber = 3,
    kResponseFlagsFieldNumber = 2,
    kStartingFromFieldNumber = 4,
    kNumberReturnedFieldNumber = 5,
  };
  // required string message = 6;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::brpc::policy::MongoHeader& header() const;
  PROTOBUF_NODISCARD ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* value);
  void unsafe_arena_set_allocated_header(::brpc::policy::MongoHeader* value);
  ::brpc::policy::MongoHeader* unsafe_arena_release_header();

  private:
  const ::brpc::policy::MongoHeader& _internal_header() const;
  ::brpc::policy::MongoHeader* _internal_mutable_header();

  public:
  // required int64 cursor_id = 3;
  bool has_cursor_id() const;
  void clear_cursor_id() ;
  ::int64_t cursor_id() const;
  void set_cursor_id(::int64_t value);

  private:
  ::int64_t _internal_cursor_id() const;
  void _internal_set_cursor_id(::int64_t value);

  public:
  // required int32 response_flags = 2;
  bool has_response_flags() const;
  void clear_response_flags() ;
  ::int32_t response_flags() const;
  void set_response_flags(::int32_t value);

  private:
  ::int32_t _internal_response_flags() const;
  void _internal_set_response_flags(::int32_t value);

  public:
  // required int32 starting_from = 4;
  bool has_starting_from() const;
  void clear_starting_from() ;
  ::int32_t starting_from() const;
  void set_starting_from(::int32_t value);

  private:
  ::int32_t _internal_starting_from() const;
  void _internal_set_starting_from(::int32_t value);

  public:
  // required int32 number_returned = 5;
  bool has_number_returned() const;
  void clear_number_returned() ;
  ::int32_t number_returned() const;
  void set_number_returned(::int32_t value);

  private:
  ::int32_t _internal_number_returned() const;
  void _internal_set_number_returned(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.MongoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::brpc::policy::MongoHeader* header_;
    ::int64_t cursor_id_;
    ::int32_t response_flags_;
    ::int32_t starting_from_;
    ::int32_t number_returned_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};// -------------------------------------------------------------------

class MongoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoRequest) */ {
 public:
  inline MongoRequest() : MongoRequest(nullptr) {}
  ~MongoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MongoRequest(::google::protobuf::internal::ConstantInitialized);

  inline MongoRequest(const MongoRequest& from)
      : MongoRequest(nullptr, from) {}
  MongoRequest(MongoRequest&& from) noexcept
    : MongoRequest() {
    *this = ::std::move(from);
  }

  inline MongoRequest& operator=(const MongoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoRequest& operator=(MongoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoRequest* internal_default_instance() {
    return reinterpret_cast<const MongoRequest*>(
               &_MongoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MongoRequest& a, MongoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MongoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MongoRequest& from) {
    MongoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MongoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.MongoRequest";
  }
  protected:
  explicit MongoRequest(::google::protobuf::Arena* arena);
  MongoRequest(::google::protobuf::Arena* arena, const MongoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // required string message = 2;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::brpc::policy::MongoHeader& header() const;
  PROTOBUF_NODISCARD ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* value);
  void unsafe_arena_set_allocated_header(::brpc::policy::MongoHeader* value);
  ::brpc::policy::MongoHeader* unsafe_arena_release_header();

  private:
  const ::brpc::policy::MongoHeader& _internal_header() const;
  ::brpc::policy::MongoHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.MongoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::brpc::policy::MongoHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class MongoService_Stub;
class MongoService : public ::google::protobuf::Service {
 protected:
  MongoService() = default;

 public:
  using Stub = MongoService_Stub;

  MongoService(const MongoService&) = delete;
  MongoService& operator=(const MongoService&) = delete;
  virtual ~MongoService() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void default_method(::google::protobuf::RpcController* controller,
                        const ::brpc::policy::MongoRequest* request,
                        ::brpc::policy::MongoResponse* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class MongoService_Stub final : public MongoService {
 public:
  MongoService_Stub(::google::protobuf::RpcChannel* channel);
  MongoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  MongoService_Stub(const MongoService_Stub&) = delete;
  MongoService_Stub& operator=(const MongoService_Stub&) = delete;

  ~MongoService_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MongoService ------------------------------------------
  void default_method(::google::protobuf::RpcController* controller,
                        const ::brpc::policy::MongoRequest* request,
                        ::brpc::policy::MongoResponse* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MongoHeader

// required int32 message_length = 1;
inline bool MongoHeader::has_message_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MongoHeader::clear_message_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MongoHeader::message_length() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.message_length)
  return _internal_message_length();
}
inline void MongoHeader::set_message_length(::int32_t value) {
  _internal_set_message_length(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.message_length)
}
inline ::int32_t MongoHeader::_internal_message_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_length_;
}
inline void MongoHeader::_internal_set_message_length(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_length_ = value;
}

// required int32 request_id = 2;
inline bool MongoHeader::has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MongoHeader::clear_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MongoHeader::request_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.request_id)
  return _internal_request_id();
}
inline void MongoHeader::set_request_id(::int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.request_id)
}
inline ::int32_t MongoHeader::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_;
}
inline void MongoHeader::_internal_set_request_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.request_id_ = value;
}

// required int32 response_to = 3;
inline bool MongoHeader::has_response_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MongoHeader::clear_response_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_to_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MongoHeader::response_to() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.response_to)
  return _internal_response_to();
}
inline void MongoHeader::set_response_to(::int32_t value) {
  _internal_set_response_to(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.response_to)
}
inline ::int32_t MongoHeader::_internal_response_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_to_;
}
inline void MongoHeader::_internal_set_response_to(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.response_to_ = value;
}

// required .brpc.policy.MongoOp op_code = 4;
inline bool MongoHeader::has_op_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MongoHeader::clear_op_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.op_code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::brpc::policy::MongoOp MongoHeader::op_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.op_code)
  return _internal_op_code();
}
inline void MongoHeader::set_op_code(::brpc::policy::MongoOp value) {
  _internal_set_op_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.op_code)
}
inline ::brpc::policy::MongoOp MongoHeader::_internal_op_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::policy::MongoOp>(_impl_.op_code_);
}
inline void MongoHeader::_internal_set_op_code(::brpc::policy::MongoOp value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::policy::MongoOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.op_code_ = value;
}

// -------------------------------------------------------------------

// MongoRequest

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void MongoRequest::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoRequest::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::policy::MongoHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::MongoHeader&>(::brpc::policy::_MongoHeader_default_instance_);
}
inline const ::brpc::policy::MongoHeader& MongoRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.header)
  return _internal_header();
}
inline void MongoRequest::unsafe_arena_set_allocated_header(::brpc::policy::MongoHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.MongoRequest.header)
}
inline ::brpc::policy::MongoHeader* MongoRequest::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::policy::MongoHeader* MongoRequest::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoRequest::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(p);
  }
  return _impl_.header_;
}
inline ::brpc::policy::MongoHeader* MongoRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::policy::MongoHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.header)
  return _msg;
}
inline void MongoRequest::set_allocated_header(::brpc::policy::MongoHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::brpc::policy::MongoHeader*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::brpc::policy::MongoHeader*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.header)
}

// required string message = 2;
inline bool MongoRequest::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MongoRequest::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MongoRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MongoRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.MongoRequest.message)
}
inline std::string* MongoRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.message)
  return _s;
}
inline const std::string& MongoRequest::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void MongoRequest::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MongoRequest::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MongoRequest::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MongoRequest::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.message)
}

// -------------------------------------------------------------------

// MongoResponse

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoResponse::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void MongoResponse::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoResponse::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::policy::MongoHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::MongoHeader&>(::brpc::policy::_MongoHeader_default_instance_);
}
inline const ::brpc::policy::MongoHeader& MongoResponse::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.header)
  return _internal_header();
}
inline void MongoResponse::unsafe_arena_set_allocated_header(::brpc::policy::MongoHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.MongoResponse.header)
}
inline ::brpc::policy::MongoHeader* MongoResponse::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::policy::MongoHeader* MongoResponse::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoResponse::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(p);
  }
  return _impl_.header_;
}
inline ::brpc::policy::MongoHeader* MongoResponse::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::policy::MongoHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.header)
  return _msg;
}
inline void MongoResponse::set_allocated_header(::brpc::policy::MongoHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::brpc::policy::MongoHeader*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::brpc::policy::MongoHeader*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.header_ = reinterpret_cast<::brpc::policy::MongoHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.header)
}

// required int32 response_flags = 2;
inline bool MongoResponse::has_response_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MongoResponse::clear_response_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t MongoResponse::response_flags() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.response_flags)
  return _internal_response_flags();
}
inline void MongoResponse::set_response_flags(::int32_t value) {
  _internal_set_response_flags(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.response_flags)
}
inline ::int32_t MongoResponse::_internal_response_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_flags_;
}
inline void MongoResponse::_internal_set_response_flags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.response_flags_ = value;
}

// required int64 cursor_id = 3;
inline bool MongoResponse::has_cursor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MongoResponse::clear_cursor_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cursor_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t MongoResponse::cursor_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.cursor_id)
  return _internal_cursor_id();
}
inline void MongoResponse::set_cursor_id(::int64_t value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.cursor_id)
}
inline ::int64_t MongoResponse::_internal_cursor_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cursor_id_;
}
inline void MongoResponse::_internal_set_cursor_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cursor_id_ = value;
}

// required int32 starting_from = 4;
inline bool MongoResponse::has_starting_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MongoResponse::clear_starting_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_from_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t MongoResponse::starting_from() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.starting_from)
  return _internal_starting_from();
}
inline void MongoResponse::set_starting_from(::int32_t value) {
  _internal_set_starting_from(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.starting_from)
}
inline ::int32_t MongoResponse::_internal_starting_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.starting_from_;
}
inline void MongoResponse::_internal_set_starting_from(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.starting_from_ = value;
}

// required int32 number_returned = 5;
inline bool MongoResponse::has_number_returned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MongoResponse::clear_number_returned() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_returned_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t MongoResponse::number_returned() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.number_returned)
  return _internal_number_returned();
}
inline void MongoResponse::set_number_returned(::int32_t value) {
  _internal_set_number_returned(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.number_returned)
}
inline ::int32_t MongoResponse::_internal_number_returned() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_returned_;
}
inline void MongoResponse::_internal_set_number_returned(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.number_returned_ = value;
}

// required string message = 6;
inline bool MongoResponse::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MongoResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MongoResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MongoResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.message)
}
inline std::string* MongoResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.message)
  return _s;
}
inline const std::string& MongoResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void MongoResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MongoResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MongoResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MongoResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::brpc::policy::MongoOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::policy::MongoOp>() {
  return ::brpc::policy::MongoOp_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto_2epb_2eh
