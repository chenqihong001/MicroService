// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
namespace brpc {
namespace policy {
class HuluRpcRequestMeta;
struct HuluRpcRequestMetaDefaultTypeInternal;
extern HuluRpcRequestMetaDefaultTypeInternal _HuluRpcRequestMeta_default_instance_;
class HuluRpcResponseMeta;
struct HuluRpcResponseMetaDefaultTypeInternal;
extern HuluRpcResponseMetaDefaultTypeInternal _HuluRpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
namespace policy {

// ===================================================================


// -------------------------------------------------------------------

class HuluRpcResponseMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcResponseMeta) */ {
 public:
  inline HuluRpcResponseMeta() : HuluRpcResponseMeta(nullptr) {}
  ~HuluRpcResponseMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HuluRpcResponseMeta(::google::protobuf::internal::ConstantInitialized);

  inline HuluRpcResponseMeta(const HuluRpcResponseMeta& from)
      : HuluRpcResponseMeta(nullptr, from) {}
  HuluRpcResponseMeta(HuluRpcResponseMeta&& from) noexcept
    : HuluRpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcResponseMeta& operator=(const HuluRpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline HuluRpcResponseMeta& operator=(HuluRpcResponseMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HuluRpcResponseMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const HuluRpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcResponseMeta*>(
               &_HuluRpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HuluRpcResponseMeta& a, HuluRpcResponseMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(HuluRpcResponseMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HuluRpcResponseMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HuluRpcResponseMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HuluRpcResponseMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HuluRpcResponseMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HuluRpcResponseMeta& from) {
    HuluRpcResponseMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HuluRpcResponseMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.HuluRpcResponseMeta";
  }
  protected:
  explicit HuluRpcResponseMeta(::google::protobuf::Arena* arena);
  HuluRpcResponseMeta(::google::protobuf::Arena* arena, const HuluRpcResponseMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kUserDataFieldNumber = 7,
    kChuckInfoFieldNumber = 5,
    kErrorCodeFieldNumber = 1,
    kCompressTypeFieldNumber = 4,
    kCorrelationIdFieldNumber = 3,
    kResponseTalkTypeFieldNumber = 6,
    kUserMessageSizeFieldNumber = 8,
    kUserDefinedSourceAddrFieldNumber = 9,
  };
  // optional string error_text = 2;
  bool has_error_text() const;
  void clear_error_text() ;
  const std::string& error_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_text(Arg_&& arg, Args_... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* value);

  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(
      const std::string& value);
  std::string* _internal_mutable_error_text();

  public:
  // optional bytes user_data = 7;
  bool has_user_data() const;
  void clear_user_data() ;
  const std::string& user_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_data(Arg_&& arg, Args_... args);
  std::string* mutable_user_data();
  PROTOBUF_NODISCARD std::string* release_user_data();
  void set_allocated_user_data(std::string* value);

  private:
  const std::string& _internal_user_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_data(
      const std::string& value);
  std::string* _internal_mutable_user_data();

  public:
  // optional .brpc.ChunkInfo chuck_info = 5;
  bool has_chuck_info() const;
  void clear_chuck_info() ;
  const ::brpc::ChunkInfo& chuck_info() const;
  PROTOBUF_NODISCARD ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* value);
  void unsafe_arena_set_allocated_chuck_info(::brpc::ChunkInfo* value);
  ::brpc::ChunkInfo* unsafe_arena_release_chuck_info();

  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chuck_info();

  public:
  // optional int32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // optional int32 compress_type = 4;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::int32_t compress_type() const;
  void set_compress_type(::int32_t value);

  private:
  ::int32_t _internal_compress_type() const;
  void _internal_set_compress_type(::int32_t value);

  public:
  // optional sint64 correlation_id = 3;
  bool has_correlation_id() const;
  void clear_correlation_id() ;
  ::int64_t correlation_id() const;
  void set_correlation_id(::int64_t value);

  private:
  ::int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(::int64_t value);

  public:
  // optional .brpc.TalkType response_talk_type = 6;
  bool has_response_talk_type() const;
  void clear_response_talk_type() ;
  ::brpc::TalkType response_talk_type() const;
  void set_response_talk_type(::brpc::TalkType value);

  private:
  ::brpc::TalkType _internal_response_talk_type() const;
  void _internal_set_response_talk_type(::brpc::TalkType value);

  public:
  // optional int32 user_message_size = 8;
  bool has_user_message_size() const;
  void clear_user_message_size() ;
  ::int32_t user_message_size() const;
  void set_user_message_size(::int32_t value);

  private:
  ::int32_t _internal_user_message_size() const;
  void _internal_set_user_message_size(::int32_t value);

  public:
  // optional int64 user_defined_source_addr = 9;
  bool has_user_defined_source_addr() const;
  void clear_user_defined_source_addr() ;
  ::int64_t user_defined_source_addr() const;
  void set_user_defined_source_addr(::int64_t value);

  private:
  ::int64_t _internal_user_defined_source_addr() const;
  void _internal_set_user_defined_source_addr(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcResponseMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_text_;
    ::google::protobuf::internal::ArenaStringPtr user_data_;
    ::brpc::ChunkInfo* chuck_info_;
    ::int32_t error_code_;
    ::int32_t compress_type_;
    ::int64_t correlation_id_;
    int response_talk_type_;
    ::int32_t user_message_size_;
    ::int64_t user_defined_source_addr_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
};// -------------------------------------------------------------------

class HuluRpcRequestMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcRequestMeta) */ {
 public:
  inline HuluRpcRequestMeta() : HuluRpcRequestMeta(nullptr) {}
  ~HuluRpcRequestMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HuluRpcRequestMeta(::google::protobuf::internal::ConstantInitialized);

  inline HuluRpcRequestMeta(const HuluRpcRequestMeta& from)
      : HuluRpcRequestMeta(nullptr, from) {}
  HuluRpcRequestMeta(HuluRpcRequestMeta&& from) noexcept
    : HuluRpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcRequestMeta& operator=(const HuluRpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline HuluRpcRequestMeta& operator=(HuluRpcRequestMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HuluRpcRequestMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const HuluRpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcRequestMeta*>(
               &_HuluRpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HuluRpcRequestMeta& a, HuluRpcRequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(HuluRpcRequestMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HuluRpcRequestMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HuluRpcRequestMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HuluRpcRequestMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HuluRpcRequestMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HuluRpcRequestMeta& from) {
    HuluRpcRequestMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HuluRpcRequestMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.HuluRpcRequestMeta";
  }
  protected:
  explicit HuluRpcRequestMeta(::google::protobuf::Arena* arena);
  HuluRpcRequestMeta(::google::protobuf::Arena* arena, const HuluRpcRequestMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kUserDataFieldNumber = 11,
    kMethodNameFieldNumber = 14,
    kCredentialDataFieldNumber = 15,
    kChuckInfoFieldNumber = 6,
    kMethodIndexFieldNumber = 2,
    kCompressTypeFieldNumber = 3,
    kCorrelationIdFieldNumber = 4,
    kLogIdFieldNumber = 5,
    kTraceIdFieldNumber = 7,
    kParentSpanIdFieldNumber = 8,
    kSpanIdFieldNumber = 9,
    kRequestTalkTypeFieldNumber = 10,
    kUserMessageSizeFieldNumber = 12,
    kUserDefinedSourceAddrFieldNumber = 13,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // optional bytes user_data = 11;
  bool has_user_data() const;
  void clear_user_data() ;
  const std::string& user_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_data(Arg_&& arg, Args_... args);
  std::string* mutable_user_data();
  PROTOBUF_NODISCARD std::string* release_user_data();
  void set_allocated_user_data(std::string* value);

  private:
  const std::string& _internal_user_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_data(
      const std::string& value);
  std::string* _internal_mutable_user_data();

  public:
  // optional string method_name = 14;
  bool has_method_name() const;
  void clear_method_name() ;
  const std::string& method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* value);

  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(
      const std::string& value);
  std::string* _internal_mutable_method_name();

  public:
  // optional bytes credential_data = 15;
  bool has_credential_data() const;
  void clear_credential_data() ;
  const std::string& credential_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_credential_data(Arg_&& arg, Args_... args);
  std::string* mutable_credential_data();
  PROTOBUF_NODISCARD std::string* release_credential_data();
  void set_allocated_credential_data(std::string* value);

  private:
  const std::string& _internal_credential_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credential_data(
      const std::string& value);
  std::string* _internal_mutable_credential_data();

  public:
  // optional .brpc.ChunkInfo chuck_info = 6;
  bool has_chuck_info() const;
  void clear_chuck_info() ;
  const ::brpc::ChunkInfo& chuck_info() const;
  PROTOBUF_NODISCARD ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* value);
  void unsafe_arena_set_allocated_chuck_info(::brpc::ChunkInfo* value);
  ::brpc::ChunkInfo* unsafe_arena_release_chuck_info();

  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chuck_info();

  public:
  // required int32 method_index = 2;
  bool has_method_index() const;
  void clear_method_index() ;
  ::int32_t method_index() const;
  void set_method_index(::int32_t value);

  private:
  ::int32_t _internal_method_index() const;
  void _internal_set_method_index(::int32_t value);

  public:
  // optional int32 compress_type = 3;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::int32_t compress_type() const;
  void set_compress_type(::int32_t value);

  private:
  ::int32_t _internal_compress_type() const;
  void _internal_set_compress_type(::int32_t value);

  public:
  // optional int64 correlation_id = 4;
  bool has_correlation_id() const;
  void clear_correlation_id() ;
  ::int64_t correlation_id() const;
  void set_correlation_id(::int64_t value);

  private:
  ::int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(::int64_t value);

  public:
  // optional int64 log_id = 5;
  bool has_log_id() const;
  void clear_log_id() ;
  ::int64_t log_id() const;
  void set_log_id(::int64_t value);

  private:
  ::int64_t _internal_log_id() const;
  void _internal_set_log_id(::int64_t value);

  public:
  // optional int64 trace_id = 7;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::int64_t trace_id() const;
  void set_trace_id(::int64_t value);

  private:
  ::int64_t _internal_trace_id() const;
  void _internal_set_trace_id(::int64_t value);

  public:
  // optional int64 parent_span_id = 8;
  bool has_parent_span_id() const;
  void clear_parent_span_id() ;
  ::int64_t parent_span_id() const;
  void set_parent_span_id(::int64_t value);

  private:
  ::int64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::int64_t value);

  public:
  // optional int64 span_id = 9;
  bool has_span_id() const;
  void clear_span_id() ;
  ::int64_t span_id() const;
  void set_span_id(::int64_t value);

  private:
  ::int64_t _internal_span_id() const;
  void _internal_set_span_id(::int64_t value);

  public:
  // optional .brpc.TalkType request_talk_type = 10;
  bool has_request_talk_type() const;
  void clear_request_talk_type() ;
  ::brpc::TalkType request_talk_type() const;
  void set_request_talk_type(::brpc::TalkType value);

  private:
  ::brpc::TalkType _internal_request_talk_type() const;
  void _internal_set_request_talk_type(::brpc::TalkType value);

  public:
  // optional int32 user_message_size = 12;
  bool has_user_message_size() const;
  void clear_user_message_size() ;
  ::int32_t user_message_size() const;
  void set_user_message_size(::int32_t value);

  private:
  ::int32_t _internal_user_message_size() const;
  void _internal_set_user_message_size(::int32_t value);

  public:
  // optional int64 user_defined_source_addr = 13;
  bool has_user_defined_source_addr() const;
  void clear_user_defined_source_addr() ;
  ::int64_t user_defined_source_addr() const;
  void set_user_defined_source_addr(::int64_t value);

  private:
  ::int64_t _internal_user_defined_source_addr() const;
  void _internal_set_user_defined_source_addr(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcRequestMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 2,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr user_data_;
    ::google::protobuf::internal::ArenaStringPtr method_name_;
    ::google::protobuf::internal::ArenaStringPtr credential_data_;
    ::brpc::ChunkInfo* chuck_info_;
    ::int32_t method_index_;
    ::int32_t compress_type_;
    ::int64_t correlation_id_;
    ::int64_t log_id_;
    ::int64_t trace_id_;
    ::int64_t parent_span_id_;
    ::int64_t span_id_;
    int request_talk_type_;
    ::int32_t user_message_size_;
    ::int64_t user_defined_source_addr_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HuluRpcRequestMeta

// required string service_name = 1;
inline bool HuluRpcRequestMeta::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HuluRpcRequestMeta::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcRequestMeta::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline std::string* HuluRpcRequestMeta::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.service_name)
  return _s;
}
inline const std::string& HuluRpcRequestMeta::_internal_service_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_name_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_service_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* HuluRpcRequestMeta::release_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcRequestMeta::set_allocated_service_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.service_name)
}

// required int32 method_index = 2;
inline bool HuluRpcRequestMeta::has_method_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_method_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t HuluRpcRequestMeta::method_index() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_index)
  return _internal_method_index();
}
inline void HuluRpcRequestMeta::set_method_index(::int32_t value) {
  _internal_set_method_index(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_index)
}
inline ::int32_t HuluRpcRequestMeta::_internal_method_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_index_;
}
inline void HuluRpcRequestMeta::_internal_set_method_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.method_index_ = value;
}

// optional int32 compress_type = 3;
inline bool HuluRpcRequestMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t HuluRpcRequestMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.compress_type)
  return _internal_compress_type();
}
inline void HuluRpcRequestMeta::set_compress_type(::int32_t value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.compress_type)
}
inline ::int32_t HuluRpcRequestMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compress_type_;
}
inline void HuluRpcRequestMeta::_internal_set_compress_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.compress_type_ = value;
}

// optional int64 correlation_id = 4;
inline bool HuluRpcRequestMeta::has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_correlation_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.correlation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t HuluRpcRequestMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.correlation_id)
  return _internal_correlation_id();
}
inline void HuluRpcRequestMeta::set_correlation_id(::int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.correlation_id)
}
inline ::int64_t HuluRpcRequestMeta::_internal_correlation_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.correlation_id_;
}
inline void HuluRpcRequestMeta::_internal_set_correlation_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.correlation_id_ = value;
}

// optional int64 log_id = 5;
inline bool HuluRpcRequestMeta::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t HuluRpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.log_id)
  return _internal_log_id();
}
inline void HuluRpcRequestMeta::set_log_id(::int64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.log_id)
}
inline ::int64_t HuluRpcRequestMeta::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void HuluRpcRequestMeta::_internal_set_log_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.log_id_ = value;
}

// optional .brpc.ChunkInfo chuck_info = 6;
inline bool HuluRpcRequestMeta::has_chuck_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chuck_info_ != nullptr);
  return value;
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::_internal_chuck_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::ChunkInfo* p = _impl_.chuck_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::ChunkInfo&>(::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::chuck_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return _internal_chuck_info();
}
inline void HuluRpcRequestMeta::unsafe_arena_set_allocated_chuck_info(::brpc::ChunkInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chuck_info_);
  }
  _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.HuluRpcRequestMeta.chuck_info)
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::release_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::ChunkInfo* released = _impl_.chuck_info_;
  _impl_.chuck_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::unsafe_arena_release_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.chuck_info)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::ChunkInfo* temp = _impl_.chuck_info_;
  _impl_.chuck_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::_internal_mutable_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.chuck_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArena());
    _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(p);
  }
  return _impl_.chuck_info_;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::mutable_chuck_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::ChunkInfo* _msg = _internal_mutable_chuck_info();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return _msg;
}
inline void HuluRpcRequestMeta::set_allocated_chuck_info(::brpc::ChunkInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chuck_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.chuck_info)
}

// optional int64 trace_id = 7;
inline bool HuluRpcRequestMeta::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t HuluRpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.trace_id)
  return _internal_trace_id();
}
inline void HuluRpcRequestMeta::set_trace_id(::int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.trace_id)
}
inline ::int64_t HuluRpcRequestMeta::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void HuluRpcRequestMeta::_internal_set_trace_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.trace_id_ = value;
}

// optional int64 parent_span_id = 8;
inline bool HuluRpcRequestMeta::has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_parent_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t HuluRpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void HuluRpcRequestMeta::set_parent_span_id(::int64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.parent_span_id)
}
inline ::int64_t HuluRpcRequestMeta::_internal_parent_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_span_id_;
}
inline void HuluRpcRequestMeta::_internal_set_parent_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.parent_span_id_ = value;
}

// optional int64 span_id = 9;
inline bool HuluRpcRequestMeta::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t HuluRpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.span_id)
  return _internal_span_id();
}
inline void HuluRpcRequestMeta::set_span_id(::int64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.span_id)
}
inline ::int64_t HuluRpcRequestMeta::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void HuluRpcRequestMeta::_internal_set_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.span_id_ = value;
}

// optional .brpc.TalkType request_talk_type = 10;
inline bool HuluRpcRequestMeta::has_request_talk_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_request_talk_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_talk_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::brpc::TalkType HuluRpcRequestMeta::request_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.request_talk_type)
  return _internal_request_talk_type();
}
inline void HuluRpcRequestMeta::set_request_talk_type(::brpc::TalkType value) {
  _internal_set_request_talk_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.request_talk_type)
}
inline ::brpc::TalkType HuluRpcRequestMeta::_internal_request_talk_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::TalkType>(_impl_.request_talk_type_);
}
inline void HuluRpcRequestMeta::_internal_set_request_talk_type(::brpc::TalkType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::TalkType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.request_talk_type_ = value;
}

// optional bytes user_data = 11;
inline bool HuluRpcRequestMeta::has_user_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HuluRpcRequestMeta::user_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_data)
  return _internal_user_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcRequestMeta::set_user_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline std::string* HuluRpcRequestMeta::mutable_user_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.user_data)
  return _s;
}
inline const std::string& HuluRpcRequestMeta::_internal_user_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_data_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_user_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_data_.Set(value, GetArena());
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_data_.Mutable( GetArena());
}
inline std::string* HuluRpcRequestMeta::release_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.user_data)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.user_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcRequestMeta::set_allocated_user_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_data_.IsDefault()) {
          _impl_.user_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.user_data)
}

// optional int32 user_message_size = 12;
inline bool HuluRpcRequestMeta::has_user_message_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_user_message_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_message_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t HuluRpcRequestMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_message_size)
  return _internal_user_message_size();
}
inline void HuluRpcRequestMeta::set_user_message_size(::int32_t value) {
  _internal_set_user_message_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_message_size)
}
inline ::int32_t HuluRpcRequestMeta::_internal_user_message_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_message_size_;
}
inline void HuluRpcRequestMeta::_internal_set_user_message_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.user_message_size_ = value;
}

// optional int64 user_defined_source_addr = 13;
inline bool HuluRpcRequestMeta::has_user_defined_source_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_user_defined_source_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_defined_source_addr_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int64_t HuluRpcRequestMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
  return _internal_user_defined_source_addr();
}
inline void HuluRpcRequestMeta::set_user_defined_source_addr(::int64_t value) {
  _internal_set_user_defined_source_addr(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
}
inline ::int64_t HuluRpcRequestMeta::_internal_user_defined_source_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_defined_source_addr_;
}
inline void HuluRpcRequestMeta::_internal_set_user_defined_source_addr(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.user_defined_source_addr_ = value;
}

// optional string method_name = 14;
inline bool HuluRpcRequestMeta::has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HuluRpcRequestMeta::method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_name)
  return _internal_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcRequestMeta::set_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.method_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline std::string* HuluRpcRequestMeta::mutable_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.method_name)
  return _s;
}
inline const std::string& HuluRpcRequestMeta::_internal_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_name_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.method_name_.Set(value, GetArena());
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.method_name_.Mutable( GetArena());
}
inline std::string* HuluRpcRequestMeta::release_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.method_name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcRequestMeta::set_allocated_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_name_.IsDefault()) {
          _impl_.method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.method_name)
}

// optional bytes credential_data = 15;
inline bool HuluRpcRequestMeta::has_credential_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void HuluRpcRequestMeta::clear_credential_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.credential_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& HuluRpcRequestMeta::credential_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.credential_data)
  return _internal_credential_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcRequestMeta::set_credential_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.credential_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline std::string* HuluRpcRequestMeta::mutable_credential_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_credential_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.credential_data)
  return _s;
}
inline const std::string& HuluRpcRequestMeta::_internal_credential_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.credential_data_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_credential_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.credential_data_.Set(value, GetArena());
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_credential_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.credential_data_.Mutable( GetArena());
}
inline std::string* HuluRpcRequestMeta::release_credential_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.credential_data)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.credential_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.credential_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcRequestMeta::set_allocated_credential_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.credential_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.credential_data_.IsDefault()) {
          _impl_.credential_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.credential_data)
}

// -------------------------------------------------------------------

// HuluRpcResponseMeta

// optional int32 error_code = 1;
inline bool HuluRpcResponseMeta::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t HuluRpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_code)
  return _internal_error_code();
}
inline void HuluRpcResponseMeta::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_code)
}
inline ::int32_t HuluRpcResponseMeta::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void HuluRpcResponseMeta::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.error_code_ = value;
}

// optional string error_text = 2;
inline bool HuluRpcResponseMeta::has_error_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HuluRpcResponseMeta::error_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_text)
  return _internal_error_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcResponseMeta::set_error_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline std::string* HuluRpcResponseMeta::mutable_error_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.error_text)
  return _s;
}
inline const std::string& HuluRpcResponseMeta::_internal_error_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_text_.Get();
}
inline void HuluRpcResponseMeta::_internal_set_error_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(value, GetArena());
}
inline std::string* HuluRpcResponseMeta::_internal_mutable_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_text_.Mutable( GetArena());
}
inline std::string* HuluRpcResponseMeta::release_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.error_text)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_text_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_text_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcResponseMeta::set_allocated_error_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_text_.IsDefault()) {
          _impl_.error_text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.error_text)
}

// optional sint64 correlation_id = 3;
inline bool HuluRpcResponseMeta::has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_correlation_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.correlation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t HuluRpcResponseMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.correlation_id)
  return _internal_correlation_id();
}
inline void HuluRpcResponseMeta::set_correlation_id(::int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.correlation_id)
}
inline ::int64_t HuluRpcResponseMeta::_internal_correlation_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.correlation_id_;
}
inline void HuluRpcResponseMeta::_internal_set_correlation_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.correlation_id_ = value;
}

// optional int32 compress_type = 4;
inline bool HuluRpcResponseMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t HuluRpcResponseMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.compress_type)
  return _internal_compress_type();
}
inline void HuluRpcResponseMeta::set_compress_type(::int32_t value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.compress_type)
}
inline ::int32_t HuluRpcResponseMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compress_type_;
}
inline void HuluRpcResponseMeta::_internal_set_compress_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.compress_type_ = value;
}

// optional .brpc.ChunkInfo chuck_info = 5;
inline bool HuluRpcResponseMeta::has_chuck_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chuck_info_ != nullptr);
  return value;
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::_internal_chuck_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::ChunkInfo* p = _impl_.chuck_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::ChunkInfo&>(::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::chuck_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return _internal_chuck_info();
}
inline void HuluRpcResponseMeta::unsafe_arena_set_allocated_chuck_info(::brpc::ChunkInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chuck_info_);
  }
  _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.HuluRpcResponseMeta.chuck_info)
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::release_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::ChunkInfo* released = _impl_.chuck_info_;
  _impl_.chuck_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::unsafe_arena_release_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.chuck_info)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::ChunkInfo* temp = _impl_.chuck_info_;
  _impl_.chuck_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::_internal_mutable_chuck_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.chuck_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArena());
    _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(p);
  }
  return _impl_.chuck_info_;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::mutable_chuck_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::ChunkInfo* _msg = _internal_mutable_chuck_info();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return _msg;
}
inline void HuluRpcResponseMeta::set_allocated_chuck_info(::brpc::ChunkInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chuck_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.chuck_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.chuck_info)
}

// optional .brpc.TalkType response_talk_type = 6;
inline bool HuluRpcResponseMeta::has_response_talk_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_response_talk_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_talk_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::brpc::TalkType HuluRpcResponseMeta::response_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.response_talk_type)
  return _internal_response_talk_type();
}
inline void HuluRpcResponseMeta::set_response_talk_type(::brpc::TalkType value) {
  _internal_set_response_talk_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.response_talk_type)
}
inline ::brpc::TalkType HuluRpcResponseMeta::_internal_response_talk_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::TalkType>(_impl_.response_talk_type_);
}
inline void HuluRpcResponseMeta::_internal_set_response_talk_type(::brpc::TalkType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::TalkType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.response_talk_type_ = value;
}

// optional bytes user_data = 7;
inline bool HuluRpcResponseMeta::has_user_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HuluRpcResponseMeta::user_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_data)
  return _internal_user_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HuluRpcResponseMeta::set_user_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline std::string* HuluRpcResponseMeta::mutable_user_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.user_data)
  return _s;
}
inline const std::string& HuluRpcResponseMeta::_internal_user_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_data_.Get();
}
inline void HuluRpcResponseMeta::_internal_set_user_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_data_.Set(value, GetArena());
}
inline std::string* HuluRpcResponseMeta::_internal_mutable_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_data_.Mutable( GetArena());
}
inline std::string* HuluRpcResponseMeta::release_user_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.user_data)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.user_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HuluRpcResponseMeta::set_allocated_user_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_data_.IsDefault()) {
          _impl_.user_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.user_data)
}

// optional int32 user_message_size = 8;
inline bool HuluRpcResponseMeta::has_user_message_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_user_message_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_message_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t HuluRpcResponseMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_message_size)
  return _internal_user_message_size();
}
inline void HuluRpcResponseMeta::set_user_message_size(::int32_t value) {
  _internal_set_user_message_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_message_size)
}
inline ::int32_t HuluRpcResponseMeta::_internal_user_message_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_message_size_;
}
inline void HuluRpcResponseMeta::_internal_set_user_message_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.user_message_size_ = value;
}

// optional int64 user_defined_source_addr = 9;
inline bool HuluRpcResponseMeta::has_user_defined_source_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void HuluRpcResponseMeta::clear_user_defined_source_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_defined_source_addr_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t HuluRpcResponseMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
  return _internal_user_defined_source_addr();
}
inline void HuluRpcResponseMeta::set_user_defined_source_addr(::int64_t value) {
  _internal_set_user_defined_source_addr(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
}
inline ::int64_t HuluRpcResponseMeta::_internal_user_defined_source_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_defined_source_addr_;
}
inline void HuluRpcResponseMeta::_internal_set_user_defined_source_addr(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.user_defined_source_addr_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_2epb_2eh
