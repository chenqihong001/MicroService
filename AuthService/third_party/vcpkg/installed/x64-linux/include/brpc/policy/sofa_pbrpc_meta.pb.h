// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/sofa_pbrpc_meta.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto;
namespace brpc {
namespace policy {
class SofaRpcMeta;
struct SofaRpcMetaDefaultTypeInternal;
extern SofaRpcMetaDefaultTypeInternal _SofaRpcMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
namespace policy {
enum SofaRpcMeta_Type : int {
  SofaRpcMeta_Type_REQUEST = 0,
  SofaRpcMeta_Type_RESPONSE = 1,
};

bool SofaRpcMeta_Type_IsValid(int value);
extern const uint32_t SofaRpcMeta_Type_internal_data_[];
constexpr SofaRpcMeta_Type SofaRpcMeta_Type_Type_MIN = static_cast<SofaRpcMeta_Type>(0);
constexpr SofaRpcMeta_Type SofaRpcMeta_Type_Type_MAX = static_cast<SofaRpcMeta_Type>(1);
constexpr int SofaRpcMeta_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SofaRpcMeta_Type_descriptor();
template <typename T>
const std::string& SofaRpcMeta_Type_Name(T value) {
  static_assert(std::is_same<T, SofaRpcMeta_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return SofaRpcMeta_Type_Name(static_cast<SofaRpcMeta_Type>(value));
}
template <>
inline const std::string& SofaRpcMeta_Type_Name(SofaRpcMeta_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SofaRpcMeta_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SofaRpcMeta_Type_Parse(absl::string_view name, SofaRpcMeta_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SofaRpcMeta_Type>(
      SofaRpcMeta_Type_descriptor(), name, value);
}
enum SofaCompressType : int {
  SOFA_COMPRESS_TYPE_NONE = 0,
  SOFA_COMPRESS_TYPE_GZIP = 1,
  SOFA_COMPRESS_TYPE_ZLIB = 2,
  SOFA_COMPRESS_TYPE_SNAPPY = 3,
  SOFA_COMPRESS_TYPE_LZ4 = 4,
};

bool SofaCompressType_IsValid(int value);
extern const uint32_t SofaCompressType_internal_data_[];
constexpr SofaCompressType SofaCompressType_MIN = static_cast<SofaCompressType>(0);
constexpr SofaCompressType SofaCompressType_MAX = static_cast<SofaCompressType>(4);
constexpr int SofaCompressType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
SofaCompressType_descriptor();
template <typename T>
const std::string& SofaCompressType_Name(T value) {
  static_assert(std::is_same<T, SofaCompressType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SofaCompressType_Name().");
  return SofaCompressType_Name(static_cast<SofaCompressType>(value));
}
template <>
inline const std::string& SofaCompressType_Name(SofaCompressType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SofaCompressType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool SofaCompressType_Parse(absl::string_view name, SofaCompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SofaCompressType>(
      SofaCompressType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SofaRpcMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.SofaRpcMeta) */ {
 public:
  inline SofaRpcMeta() : SofaRpcMeta(nullptr) {}
  ~SofaRpcMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SofaRpcMeta(::google::protobuf::internal::ConstantInitialized);

  inline SofaRpcMeta(const SofaRpcMeta& from)
      : SofaRpcMeta(nullptr, from) {}
  SofaRpcMeta(SofaRpcMeta&& from) noexcept
    : SofaRpcMeta() {
    *this = ::std::move(from);
  }

  inline SofaRpcMeta& operator=(const SofaRpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SofaRpcMeta& operator=(SofaRpcMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SofaRpcMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const SofaRpcMeta* internal_default_instance() {
    return reinterpret_cast<const SofaRpcMeta*>(
               &_SofaRpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SofaRpcMeta& a, SofaRpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(SofaRpcMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SofaRpcMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SofaRpcMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SofaRpcMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SofaRpcMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SofaRpcMeta& from) {
    SofaRpcMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SofaRpcMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.SofaRpcMeta";
  }
  protected:
  explicit SofaRpcMeta(::google::protobuf::Arena* arena);
  SofaRpcMeta(::google::protobuf::Arena* arena, const SofaRpcMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = SofaRpcMeta_Type;
  static constexpr Type REQUEST = SofaRpcMeta_Type_REQUEST;
  static constexpr Type RESPONSE = SofaRpcMeta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return SofaRpcMeta_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = SofaRpcMeta_Type_Type_MIN;
  static constexpr Type Type_MAX = SofaRpcMeta_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = SofaRpcMeta_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return SofaRpcMeta_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return SofaRpcMeta_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return SofaRpcMeta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 100,
    kReasonFieldNumber = 202,
    kSequenceIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kFailedFieldNumber = 200,
    kErrorCodeFieldNumber = 201,
    kCompressTypeFieldNumber = 300,
    kExpectedResponseCompressTypeFieldNumber = 301,
  };
  // optional string method = 100;
  bool has_method() const;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // optional string reason = 202;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // required uint64 sequence_id = 2;
  bool has_sequence_id() const;
  void clear_sequence_id() ;
  ::uint64_t sequence_id() const;
  void set_sequence_id(::uint64_t value);

  private:
  ::uint64_t _internal_sequence_id() const;
  void _internal_set_sequence_id(::uint64_t value);

  public:
  // required .brpc.policy.SofaRpcMeta.Type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::brpc::policy::SofaRpcMeta_Type type() const;
  void set_type(::brpc::policy::SofaRpcMeta_Type value);

  private:
  ::brpc::policy::SofaRpcMeta_Type _internal_type() const;
  void _internal_set_type(::brpc::policy::SofaRpcMeta_Type value);

  public:
  // optional bool failed = 200;
  bool has_failed() const;
  void clear_failed() ;
  bool failed() const;
  void set_failed(bool value);

  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);

  public:
  // optional int32 error_code = 201;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // optional .brpc.policy.SofaCompressType compress_type = 300;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::brpc::policy::SofaCompressType compress_type() const;
  void set_compress_type(::brpc::policy::SofaCompressType value);

  private:
  ::brpc::policy::SofaCompressType _internal_compress_type() const;
  void _internal_set_compress_type(::brpc::policy::SofaCompressType value);

  public:
  // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
  bool has_expected_response_compress_type() const;
  void clear_expected_response_compress_type() ;
  ::brpc::policy::SofaCompressType expected_response_compress_type() const;
  void set_expected_response_compress_type(::brpc::policy::SofaCompressType value);

  private:
  ::brpc::policy::SofaCompressType _internal_expected_response_compress_type() const;
  void _internal_set_expected_response_compress_type(::brpc::policy::SofaCompressType value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.SofaRpcMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 3,
      52, 17>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::uint64_t sequence_id_;
    int type_;
    bool failed_;
    ::int32_t error_code_;
    int compress_type_;
    int expected_response_compress_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SofaRpcMeta

// required .brpc.policy.SofaRpcMeta.Type type = 1;
inline bool SofaRpcMeta::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::brpc::policy::SofaRpcMeta_Type SofaRpcMeta::type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.type)
  return _internal_type();
}
inline void SofaRpcMeta::set_type(::brpc::policy::SofaRpcMeta_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.type)
}
inline ::brpc::policy::SofaRpcMeta_Type SofaRpcMeta::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::policy::SofaRpcMeta_Type>(_impl_.type_);
}
inline void SofaRpcMeta::_internal_set_type(::brpc::policy::SofaRpcMeta_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::policy::SofaRpcMeta_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// required uint64 sequence_id = 2;
inline bool SofaRpcMeta::has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_sequence_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t SofaRpcMeta::sequence_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.sequence_id)
  return _internal_sequence_id();
}
inline void SofaRpcMeta::set_sequence_id(::uint64_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.sequence_id)
}
inline ::uint64_t SofaRpcMeta::_internal_sequence_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_id_;
}
inline void SofaRpcMeta::_internal_set_sequence_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_id_ = value;
}

// optional string method = 100;
inline bool SofaRpcMeta::has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SofaRpcMeta::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SofaRpcMeta::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.method)
}
inline std::string* SofaRpcMeta::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:brpc.policy.SofaRpcMeta.method)
  return _s;
}
inline const std::string& SofaRpcMeta::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void SofaRpcMeta::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* SofaRpcMeta::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* SofaRpcMeta::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.SofaRpcMeta.method)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.method_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SofaRpcMeta::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.SofaRpcMeta.method)
}

// optional bool failed = 200;
inline bool SofaRpcMeta::has_failed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_failed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.failed_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool SofaRpcMeta::failed() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.failed)
  return _internal_failed();
}
inline void SofaRpcMeta::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.failed)
}
inline bool SofaRpcMeta::_internal_failed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.failed_;
}
inline void SofaRpcMeta::_internal_set_failed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.failed_ = value;
}

// optional int32 error_code = 201;
inline bool SofaRpcMeta::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t SofaRpcMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.error_code)
  return _internal_error_code();
}
inline void SofaRpcMeta::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.error_code)
}
inline ::int32_t SofaRpcMeta::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void SofaRpcMeta::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.error_code_ = value;
}

// optional string reason = 202;
inline bool SofaRpcMeta::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SofaRpcMeta::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SofaRpcMeta::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.reason)
}
inline std::string* SofaRpcMeta::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:brpc.policy.SofaRpcMeta.reason)
  return _s;
}
inline const std::string& SofaRpcMeta::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void SofaRpcMeta::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* SofaRpcMeta::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* SofaRpcMeta::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.SofaRpcMeta.reason)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SofaRpcMeta::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.SofaRpcMeta.reason)
}

// optional .brpc.policy.SofaCompressType compress_type = 300;
inline bool SofaRpcMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.compress_type)
  return _internal_compress_type();
}
inline void SofaRpcMeta::set_compress_type(::brpc::policy::SofaCompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.compress_type)
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::policy::SofaCompressType>(_impl_.compress_type_);
}
inline void SofaRpcMeta::_internal_set_compress_type(::brpc::policy::SofaCompressType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::policy::SofaCompressType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.compress_type_ = value;
}

// optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
inline bool SofaRpcMeta::has_expected_response_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SofaRpcMeta::clear_expected_response_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expected_response_compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.expected_response_compress_type)
  return _internal_expected_response_compress_type();
}
inline void SofaRpcMeta::set_expected_response_compress_type(::brpc::policy::SofaCompressType value) {
  _internal_set_expected_response_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.expected_response_compress_type)
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::_internal_expected_response_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::policy::SofaCompressType>(_impl_.expected_response_compress_type_);
}
inline void SofaRpcMeta::_internal_set_expected_response_compress_type(::brpc::policy::SofaCompressType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::policy::SofaCompressType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.expected_response_compress_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::brpc::policy::SofaRpcMeta_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::policy::SofaRpcMeta_Type>() {
  return ::brpc::policy::SofaRpcMeta_Type_descriptor();
}
template <>
struct is_proto_enum<::brpc::policy::SofaCompressType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::policy::SofaCompressType>() {
  return ::brpc::policy::SofaCompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto_2epb_2eh
