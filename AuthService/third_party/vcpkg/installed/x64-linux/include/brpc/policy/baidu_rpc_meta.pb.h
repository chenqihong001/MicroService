// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "brpc/options.pb.h"
#include "brpc/streaming_rpc_meta.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
namespace brpc {
namespace policy {
class RpcMeta;
struct RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcMeta_UserFieldsEntry_DoNotUse;
struct RpcMeta_UserFieldsEntry_DoNotUseDefaultTypeInternal;
extern RpcMeta_UserFieldsEntry_DoNotUseDefaultTypeInternal _RpcMeta_UserFieldsEntry_DoNotUse_default_instance_;
class RpcRequestMeta;
struct RpcRequestMetaDefaultTypeInternal;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
class RpcResponseMeta;
struct RpcResponseMetaDefaultTypeInternal;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
namespace policy {

// ===================================================================


// -------------------------------------------------------------------

class RpcResponseMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcResponseMeta) */ {
 public:
  inline RpcResponseMeta() : RpcResponseMeta(nullptr) {}
  ~RpcResponseMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcResponseMeta(::google::protobuf::internal::ConstantInitialized);

  inline RpcResponseMeta(const RpcResponseMeta& from)
      : RpcResponseMeta(nullptr, from) {}
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
    : RpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponseMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const RpcResponseMeta*>(
               &_RpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponseMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponseMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponseMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponseMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcResponseMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RpcResponseMeta& from) {
    RpcResponseMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpcResponseMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.RpcResponseMeta";
  }
  protected:
  explicit RpcResponseMeta(::google::protobuf::Arena* arena);
  RpcResponseMeta(::google::protobuf::Arena* arena, const RpcResponseMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional string error_text = 2;
  bool has_error_text() const;
  void clear_error_text() ;
  const std::string& error_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_text(Arg_&& arg, Args_... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* value);

  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(
      const std::string& value);
  std::string* _internal_mutable_error_text();

  public:
  // optional int32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcResponseMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_text_;
    ::int32_t error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};// -------------------------------------------------------------------

class RpcRequestMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcRequestMeta) */ {
 public:
  inline RpcRequestMeta() : RpcRequestMeta(nullptr) {}
  ~RpcRequestMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcRequestMeta(::google::protobuf::internal::ConstantInitialized);

  inline RpcRequestMeta(const RpcRequestMeta& from)
      : RpcRequestMeta(nullptr, from) {}
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequestMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const RpcRequestMeta*>(
               &_RpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequestMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequestMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequestMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequestMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcRequestMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RpcRequestMeta& from) {
    RpcRequestMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpcRequestMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.RpcRequestMeta";
  }
  protected:
  explicit RpcRequestMeta(::google::protobuf::Arena* arena);
  RpcRequestMeta(::google::protobuf::Arena* arena, const RpcRequestMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kRequestIdFieldNumber = 7,
    kLogIdFieldNumber = 3,
    kTraceIdFieldNumber = 4,
    kSpanIdFieldNumber = 5,
    kParentSpanIdFieldNumber = 6,
    kTimeoutMsFieldNumber = 8,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // required string method_name = 2;
  bool has_method_name() const;
  void clear_method_name() ;
  const std::string& method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* value);

  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(
      const std::string& value);
  std::string* _internal_mutable_method_name();

  public:
  // optional string request_id = 7;
  bool has_request_id() const;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // optional int64 log_id = 3;
  bool has_log_id() const;
  void clear_log_id() ;
  ::int64_t log_id() const;
  void set_log_id(::int64_t value);

  private:
  ::int64_t _internal_log_id() const;
  void _internal_set_log_id(::int64_t value);

  public:
  // optional int64 trace_id = 4;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::int64_t trace_id() const;
  void set_trace_id(::int64_t value);

  private:
  ::int64_t _internal_trace_id() const;
  void _internal_set_trace_id(::int64_t value);

  public:
  // optional int64 span_id = 5;
  bool has_span_id() const;
  void clear_span_id() ;
  ::int64_t span_id() const;
  void set_span_id(::int64_t value);

  private:
  ::int64_t _internal_span_id() const;
  void _internal_set_span_id(::int64_t value);

  public:
  // optional int64 parent_span_id = 6;
  bool has_parent_span_id() const;
  void clear_parent_span_id() ;
  ::int64_t parent_span_id() const;
  void set_parent_span_id(::int64_t value);

  private:
  ::int64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::int64_t value);

  public:
  // optional int32 timeout_ms = 8;
  bool has_timeout_ms() const;
  void clear_timeout_ms() ;
  ::int32_t timeout_ms() const;
  void set_timeout_ms(::int32_t value);

  private:
  ::int32_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcRequestMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr method_name_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::int64_t log_id_;
    ::int64_t trace_id_;
    ::int64_t span_id_;
    ::int64_t parent_span_id_;
    ::int32_t timeout_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};// -------------------------------------------------------------------

class RpcMeta_UserFieldsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          RpcMeta_UserFieldsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      RpcMeta_UserFieldsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RpcMeta_UserFieldsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcMeta_UserFieldsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RpcMeta_UserFieldsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RpcMeta_UserFieldsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RpcMeta_UserFieldsEntry_DoNotUse*>(
        &_RpcMeta_UserFieldsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "brpc.policy.RpcMeta.UserFieldsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "brpc.policy.RpcMeta.UserFieldsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcMeta) */ {
 public:
  inline RpcMeta() : RpcMeta(nullptr) {}
  ~RpcMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcMeta(::google::protobuf::internal::ConstantInitialized);

  inline RpcMeta(const RpcMeta& from)
      : RpcMeta(nullptr, from) {}
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RpcMeta& from) {
    RpcMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpcMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.policy.RpcMeta";
  }
  protected:
  explicit RpcMeta(::google::protobuf::Arena* arena);
  RpcMeta(::google::protobuf::Arena* arena, const RpcMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldsFieldNumber = 9,
    kAuthenticationDataFieldNumber = 7,
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
    kChunkInfoFieldNumber = 6,
    kStreamSettingsFieldNumber = 8,
    kCorrelationIdFieldNumber = 4,
    kCompressTypeFieldNumber = 3,
    kAttachmentSizeFieldNumber = 5,
  };
  // map<string, string> user_fields = 9;
  int user_fields_size() const;
  private:
  int _internal_user_fields_size() const;

  public:
  void clear_user_fields() ;
  const ::google::protobuf::Map<std::string, std::string>& user_fields() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_user_fields();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_user_fields() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_user_fields();

  public:
  // optional bytes authentication_data = 7;
  bool has_authentication_data() const;
  void clear_authentication_data() ;
  const std::string& authentication_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authentication_data(Arg_&& arg, Args_... args);
  std::string* mutable_authentication_data();
  PROTOBUF_NODISCARD std::string* release_authentication_data();
  void set_allocated_authentication_data(std::string* value);

  private:
  const std::string& _internal_authentication_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authentication_data(
      const std::string& value);
  std::string* _internal_mutable_authentication_data();

  public:
  // optional .brpc.policy.RpcRequestMeta request = 1;
  bool has_request() const;
  void clear_request() ;
  const ::brpc::policy::RpcRequestMeta& request() const;
  PROTOBUF_NODISCARD ::brpc::policy::RpcRequestMeta* release_request();
  ::brpc::policy::RpcRequestMeta* mutable_request();
  void set_allocated_request(::brpc::policy::RpcRequestMeta* value);
  void unsafe_arena_set_allocated_request(::brpc::policy::RpcRequestMeta* value);
  ::brpc::policy::RpcRequestMeta* unsafe_arena_release_request();

  private:
  const ::brpc::policy::RpcRequestMeta& _internal_request() const;
  ::brpc::policy::RpcRequestMeta* _internal_mutable_request();

  public:
  // optional .brpc.policy.RpcResponseMeta response = 2;
  bool has_response() const;
  void clear_response() ;
  const ::brpc::policy::RpcResponseMeta& response() const;
  PROTOBUF_NODISCARD ::brpc::policy::RpcResponseMeta* release_response();
  ::brpc::policy::RpcResponseMeta* mutable_response();
  void set_allocated_response(::brpc::policy::RpcResponseMeta* value);
  void unsafe_arena_set_allocated_response(::brpc::policy::RpcResponseMeta* value);
  ::brpc::policy::RpcResponseMeta* unsafe_arena_release_response();

  private:
  const ::brpc::policy::RpcResponseMeta& _internal_response() const;
  ::brpc::policy::RpcResponseMeta* _internal_mutable_response();

  public:
  // optional .brpc.ChunkInfo chunk_info = 6;
  bool has_chunk_info() const;
  void clear_chunk_info() ;
  const ::brpc::ChunkInfo& chunk_info() const;
  PROTOBUF_NODISCARD ::brpc::ChunkInfo* release_chunk_info();
  ::brpc::ChunkInfo* mutable_chunk_info();
  void set_allocated_chunk_info(::brpc::ChunkInfo* value);
  void unsafe_arena_set_allocated_chunk_info(::brpc::ChunkInfo* value);
  ::brpc::ChunkInfo* unsafe_arena_release_chunk_info();

  private:
  const ::brpc::ChunkInfo& _internal_chunk_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chunk_info();

  public:
  // optional .brpc.StreamSettings stream_settings = 8;
  bool has_stream_settings() const;
  void clear_stream_settings() ;
  const ::brpc::StreamSettings& stream_settings() const;
  PROTOBUF_NODISCARD ::brpc::StreamSettings* release_stream_settings();
  ::brpc::StreamSettings* mutable_stream_settings();
  void set_allocated_stream_settings(::brpc::StreamSettings* value);
  void unsafe_arena_set_allocated_stream_settings(::brpc::StreamSettings* value);
  ::brpc::StreamSettings* unsafe_arena_release_stream_settings();

  private:
  const ::brpc::StreamSettings& _internal_stream_settings() const;
  ::brpc::StreamSettings* _internal_mutable_stream_settings();

  public:
  // optional int64 correlation_id = 4;
  bool has_correlation_id() const;
  void clear_correlation_id() ;
  ::int64_t correlation_id() const;
  void set_correlation_id(::int64_t value);

  private:
  ::int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(::int64_t value);

  public:
  // optional int32 compress_type = 3;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::int32_t compress_type() const;
  void set_compress_type(::int32_t value);

  private:
  ::int32_t _internal_compress_type() const;
  void _internal_set_compress_type(::int32_t value);

  public:
  // optional int32 attachment_size = 5;
  bool has_attachment_size() const;
  void clear_attachment_size() ;
  ::int32_t attachment_size() const;
  void set_attachment_size(::int32_t value);

  private:
  ::int32_t _internal_attachment_size() const;
  void _internal_set_attachment_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 5,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<RpcMeta_UserFieldsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        user_fields_;
    ::google::protobuf::internal::ArenaStringPtr authentication_data_;
    ::brpc::policy::RpcRequestMeta* request_;
    ::brpc::policy::RpcResponseMeta* response_;
    ::brpc::ChunkInfo* chunk_info_;
    ::brpc::StreamSettings* stream_settings_;
    ::int64_t correlation_id_;
    ::int32_t compress_type_;
    ::int32_t attachment_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcMeta

// optional .brpc.policy.RpcRequestMeta request = 1;
inline bool RpcMeta::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline void RpcMeta::clear_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::RpcRequestMeta& RpcMeta::_internal_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::policy::RpcRequestMeta* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::RpcRequestMeta&>(::brpc::policy::_RpcRequestMeta_default_instance_);
}
inline const ::brpc::policy::RpcRequestMeta& RpcMeta::request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.request)
  return _internal_request();
}
inline void RpcMeta::unsafe_arena_set_allocated_request(::brpc::policy::RpcRequestMeta* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = reinterpret_cast<::brpc::policy::RpcRequestMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.request)
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::RpcRequestMeta* released = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::unsafe_arena_release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::RpcRequestMeta* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::_internal_mutable_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::RpcRequestMeta>(GetArena());
    _impl_.request_ = reinterpret_cast<::brpc::policy::RpcRequestMeta*>(p);
  }
  return _impl_.request_;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::policy::RpcRequestMeta* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.request)
  return _msg;
}
inline void RpcMeta::set_allocated_request(::brpc::policy::RpcRequestMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::brpc::policy::RpcRequestMeta*>(_impl_.request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::brpc::policy::RpcRequestMeta*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.request_ = reinterpret_cast<::brpc::policy::RpcRequestMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.request)
}

// optional .brpc.policy.RpcResponseMeta response = 2;
inline bool RpcMeta::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void RpcMeta::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::brpc::policy::RpcResponseMeta& RpcMeta::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::policy::RpcResponseMeta* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::RpcResponseMeta&>(::brpc::policy::_RpcResponseMeta_default_instance_);
}
inline const ::brpc::policy::RpcResponseMeta& RpcMeta::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.response)
  return _internal_response();
}
inline void RpcMeta::unsafe_arena_set_allocated_response(::brpc::policy::RpcResponseMeta* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::brpc::policy::RpcResponseMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.response)
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::policy::RpcResponseMeta* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.response)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::policy::RpcResponseMeta* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::RpcResponseMeta>(GetArena());
    _impl_.response_ = reinterpret_cast<::brpc::policy::RpcResponseMeta*>(p);
  }
  return _impl_.response_;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::policy::RpcResponseMeta* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.response)
  return _msg;
}
inline void RpcMeta::set_allocated_response(::brpc::policy::RpcResponseMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::brpc::policy::RpcResponseMeta*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::brpc::policy::RpcResponseMeta*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.response_ = reinterpret_cast<::brpc::policy::RpcResponseMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.response)
}

// optional int32 compress_type = 3;
inline bool RpcMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RpcMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.compress_type)
  return _internal_compress_type();
}
inline void RpcMeta::set_compress_type(::int32_t value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.compress_type)
}
inline ::int32_t RpcMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compress_type_;
}
inline void RpcMeta::_internal_set_compress_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.compress_type_ = value;
}

// optional int64 correlation_id = 4;
inline bool RpcMeta::has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RpcMeta::clear_correlation_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.correlation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.correlation_id)
  return _internal_correlation_id();
}
inline void RpcMeta::set_correlation_id(::int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.correlation_id)
}
inline ::int64_t RpcMeta::_internal_correlation_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.correlation_id_;
}
inline void RpcMeta::_internal_set_correlation_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.correlation_id_ = value;
}

// optional int32 attachment_size = 5;
inline bool RpcMeta::has_attachment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RpcMeta::clear_attachment_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attachment_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t RpcMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.attachment_size)
  return _internal_attachment_size();
}
inline void RpcMeta::set_attachment_size(::int32_t value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.attachment_size)
}
inline ::int32_t RpcMeta::_internal_attachment_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attachment_size_;
}
inline void RpcMeta::_internal_set_attachment_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.attachment_size_ = value;
}

// optional .brpc.ChunkInfo chunk_info = 6;
inline bool RpcMeta::has_chunk_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chunk_info_ != nullptr);
  return value;
}
inline const ::brpc::ChunkInfo& RpcMeta::_internal_chunk_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::ChunkInfo* p = _impl_.chunk_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::ChunkInfo&>(::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& RpcMeta::chunk_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.chunk_info)
  return _internal_chunk_info();
}
inline void RpcMeta::unsafe_arena_set_allocated_chunk_info(::brpc::ChunkInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chunk_info_);
  }
  _impl_.chunk_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.chunk_info)
}
inline ::brpc::ChunkInfo* RpcMeta::release_chunk_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::brpc::ChunkInfo* released = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::ChunkInfo* RpcMeta::unsafe_arena_release_chunk_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.chunk_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::brpc::ChunkInfo* temp = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* RpcMeta::_internal_mutable_chunk_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.chunk_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArena());
    _impl_.chunk_info_ = reinterpret_cast<::brpc::ChunkInfo*>(p);
  }
  return _impl_.chunk_info_;
}
inline ::brpc::ChunkInfo* RpcMeta::mutable_chunk_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::ChunkInfo* _msg = _internal_mutable_chunk_info();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.chunk_info)
  return _msg;
}
inline void RpcMeta::set_allocated_chunk_info(::brpc::ChunkInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chunk_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.chunk_info_ = reinterpret_cast<::brpc::ChunkInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.chunk_info)
}

// optional bytes authentication_data = 7;
inline bool RpcMeta::has_authentication_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcMeta::clear_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.authentication_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMeta::authentication_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.authentication_data)
  return _internal_authentication_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMeta::set_authentication_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.authentication_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.authentication_data)
}
inline std::string* RpcMeta::mutable_authentication_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_authentication_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.authentication_data)
  return _s;
}
inline const std::string& RpcMeta::_internal_authentication_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.authentication_data_.Get();
}
inline void RpcMeta::_internal_set_authentication_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.authentication_data_.Set(value, GetArena());
}
inline std::string* RpcMeta::_internal_mutable_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.authentication_data_.Mutable( GetArena());
}
inline std::string* RpcMeta::release_authentication_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.authentication_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.authentication_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authentication_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMeta::set_allocated_authentication_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authentication_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authentication_data_.IsDefault()) {
          _impl_.authentication_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.authentication_data)
}

// optional .brpc.StreamSettings stream_settings = 8;
inline bool RpcMeta::has_stream_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_settings_ != nullptr);
  return value;
}
inline const ::brpc::StreamSettings& RpcMeta::_internal_stream_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::brpc::StreamSettings* p = _impl_.stream_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::StreamSettings&>(::brpc::_StreamSettings_default_instance_);
}
inline const ::brpc::StreamSettings& RpcMeta::stream_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.stream_settings)
  return _internal_stream_settings();
}
inline void RpcMeta::unsafe_arena_set_allocated_stream_settings(::brpc::StreamSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stream_settings_);
  }
  _impl_.stream_settings_ = reinterpret_cast<::brpc::StreamSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.stream_settings)
}
inline ::brpc::StreamSettings* RpcMeta::release_stream_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::StreamSettings* released = _impl_.stream_settings_;
  _impl_.stream_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::brpc::StreamSettings* RpcMeta::unsafe_arena_release_stream_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.stream_settings)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::StreamSettings* temp = _impl_.stream_settings_;
  _impl_.stream_settings_ = nullptr;
  return temp;
}
inline ::brpc::StreamSettings* RpcMeta::_internal_mutable_stream_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.stream_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::StreamSettings>(GetArena());
    _impl_.stream_settings_ = reinterpret_cast<::brpc::StreamSettings*>(p);
  }
  return _impl_.stream_settings_;
}
inline ::brpc::StreamSettings* RpcMeta::mutable_stream_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::brpc::StreamSettings* _msg = _internal_mutable_stream_settings();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.stream_settings)
  return _msg;
}
inline void RpcMeta::set_allocated_stream_settings(::brpc::StreamSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stream_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.stream_settings_ = reinterpret_cast<::brpc::StreamSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.stream_settings)
}

// map<string, string> user_fields = 9;
inline int RpcMeta::_internal_user_fields_size() const {
  return _internal_user_fields().size();
}
inline int RpcMeta::user_fields_size() const {
  return _internal_user_fields_size();
}
inline void RpcMeta::clear_user_fields() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_fields_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RpcMeta::_internal_user_fields() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_fields_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RpcMeta::user_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:brpc.policy.RpcMeta.user_fields)
  return _internal_user_fields();
}
inline ::google::protobuf::Map<std::string, std::string>* RpcMeta::_internal_mutable_user_fields() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.user_fields_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RpcMeta::mutable_user_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:brpc.policy.RpcMeta.user_fields)
  return _internal_mutable_user_fields();
}

// -------------------------------------------------------------------

// RpcRequestMeta

// required string service_name = 1;
inline bool RpcRequestMeta::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcRequestMeta::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcRequestMeta::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.service_name)
}
inline std::string* RpcRequestMeta::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.service_name)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_service_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_name_.Get();
}
inline void RpcRequestMeta::_internal_set_service_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* RpcRequestMeta::_internal_mutable_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* RpcRequestMeta::release_service_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcRequestMeta::set_allocated_service_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.service_name)
}

// required string method_name = 2;
inline bool RpcRequestMeta::has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcRequestMeta::method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.method_name)
  return _internal_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcRequestMeta::set_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.method_name)
}
inline std::string* RpcRequestMeta::mutable_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.method_name)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_name_.Get();
}
inline void RpcRequestMeta::_internal_set_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(value, GetArena());
}
inline std::string* RpcRequestMeta::_internal_mutable_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_name_.Mutable( GetArena());
}
inline std::string* RpcRequestMeta::release_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.method_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcRequestMeta::set_allocated_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_name_.IsDefault()) {
          _impl_.method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.method_name)
}

// optional int64 log_id = 3;
inline bool RpcRequestMeta::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t RpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.log_id)
  return _internal_log_id();
}
inline void RpcRequestMeta::set_log_id(::int64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.log_id)
}
inline ::int64_t RpcRequestMeta::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void RpcRequestMeta::_internal_set_log_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.log_id_ = value;
}

// optional int64 trace_id = 4;
inline bool RpcRequestMeta::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t RpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.trace_id)
  return _internal_trace_id();
}
inline void RpcRequestMeta::set_trace_id(::int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.trace_id)
}
inline ::int64_t RpcRequestMeta::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void RpcRequestMeta::_internal_set_trace_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trace_id_ = value;
}

// optional int64 span_id = 5;
inline bool RpcRequestMeta::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t RpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.span_id)
  return _internal_span_id();
}
inline void RpcRequestMeta::set_span_id(::int64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.span_id)
}
inline ::int64_t RpcRequestMeta::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void RpcRequestMeta::_internal_set_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.span_id_ = value;
}

// optional int64 parent_span_id = 6;
inline bool RpcRequestMeta::has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_parent_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t RpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void RpcRequestMeta::set_parent_span_id(::int64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.parent_span_id)
}
inline ::int64_t RpcRequestMeta::_internal_parent_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_span_id_;
}
inline void RpcRequestMeta::_internal_set_parent_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.parent_span_id_ = value;
}

// optional string request_id = 7;
inline bool RpcRequestMeta::has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcRequestMeta::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcRequestMeta::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.request_id)
}
inline std::string* RpcRequestMeta::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.request_id)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_.Get();
}
inline void RpcRequestMeta::_internal_set_request_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* RpcRequestMeta::_internal_mutable_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* RpcRequestMeta::release_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.request_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.request_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcRequestMeta::set_allocated_request_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.request_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.request_id)
}

// optional int32 timeout_ms = 8;
inline bool RpcRequestMeta::has_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RpcRequestMeta::clear_timeout_ms() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t RpcRequestMeta::timeout_ms() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.timeout_ms)
  return _internal_timeout_ms();
}
inline void RpcRequestMeta::set_timeout_ms(::int32_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.timeout_ms)
}
inline ::int32_t RpcRequestMeta::_internal_timeout_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_ms_;
}
inline void RpcRequestMeta::_internal_set_timeout_ms(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timeout_ms_ = value;
}

// -------------------------------------------------------------------

// RpcResponseMeta

// optional int32 error_code = 1;
inline bool RpcResponseMeta::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpcResponseMeta::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_code)
  return _internal_error_code();
}
inline void RpcResponseMeta::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_code)
}
inline ::int32_t RpcResponseMeta::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void RpcResponseMeta::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_code_ = value;
}

// optional string error_text = 2;
inline bool RpcResponseMeta::has_error_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcResponseMeta::clear_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcResponseMeta::error_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_text)
  return _internal_error_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcResponseMeta::set_error_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_text)
}
inline std::string* RpcResponseMeta::mutable_error_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcResponseMeta.error_text)
  return _s;
}
inline const std::string& RpcResponseMeta::_internal_error_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_text_.Get();
}
inline void RpcResponseMeta::_internal_set_error_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(value, GetArena());
}
inline std::string* RpcResponseMeta::_internal_mutable_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_text_.Mutable( GetArena());
}
inline std::string* RpcResponseMeta::release_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.policy.RpcResponseMeta.error_text)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_text_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_text_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcResponseMeta::set_allocated_error_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_text_.IsDefault()) {
          _impl_.error_text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcResponseMeta.error_text)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_2epb_2eh
