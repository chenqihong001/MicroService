// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fspan_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fspan_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fspan_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fspan_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fspan_2eproto;
namespace brpc {
class BriefSpan;
struct BriefSpanDefaultTypeInternal;
extern BriefSpanDefaultTypeInternal _BriefSpan_default_instance_;
class RpczSpan;
struct RpczSpanDefaultTypeInternal;
extern RpczSpanDefaultTypeInternal _RpczSpan_default_instance_;
class SpanAnnotation;
struct SpanAnnotationDefaultTypeInternal;
extern SpanAnnotationDefaultTypeInternal _SpanAnnotation_default_instance_;
class TracingSpan;
struct TracingSpanDefaultTypeInternal;
extern TracingSpanDefaultTypeInternal _TracingSpan_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
enum SpanType : int {
  SPAN_TYPE_SERVER = 0,
  SPAN_TYPE_CLIENT = 1,
  SPAN_TYPE_BTHREAD = 2,
};

bool SpanType_IsValid(int value);
extern const uint32_t SpanType_internal_data_[];
constexpr SpanType SpanType_MIN = static_cast<SpanType>(0);
constexpr SpanType SpanType_MAX = static_cast<SpanType>(2);
constexpr int SpanType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SpanType_descriptor();
template <typename T>
const std::string& SpanType_Name(T value) {
  static_assert(std::is_same<T, SpanType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SpanType_Name().");
  return SpanType_Name(static_cast<SpanType>(value));
}
template <>
inline const std::string& SpanType_Name(SpanType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SpanType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SpanType_Parse(absl::string_view name, SpanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpanType>(
      SpanType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SpanAnnotation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.SpanAnnotation) */ {
 public:
  inline SpanAnnotation() : SpanAnnotation(nullptr) {}
  ~SpanAnnotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpanAnnotation(::google::protobuf::internal::ConstantInitialized);

  inline SpanAnnotation(const SpanAnnotation& from)
      : SpanAnnotation(nullptr, from) {}
  SpanAnnotation(SpanAnnotation&& from) noexcept
    : SpanAnnotation() {
    *this = ::std::move(from);
  }

  inline SpanAnnotation& operator=(const SpanAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanAnnotation& operator=(SpanAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanAnnotation* internal_default_instance() {
    return reinterpret_cast<const SpanAnnotation*>(
               &_SpanAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpanAnnotation& a, SpanAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanAnnotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpanAnnotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpanAnnotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpanAnnotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SpanAnnotation& from) {
    SpanAnnotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SpanAnnotation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.SpanAnnotation";
  }
  protected:
  explicit SpanAnnotation(::google::protobuf::Arena* arena);
  SpanAnnotation(::google::protobuf::Arena* arena, const SpanAnnotation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRealtimeUsFieldNumber = 1,
  };
  // required string content = 2;
  bool has_content() const;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // required int64 realtime_us = 1;
  bool has_realtime_us() const;
  void clear_realtime_us() ;
  ::int64_t realtime_us() const;
  void set_realtime_us(::int64_t value);

  private:
  ::int64_t _internal_realtime_us() const;
  void _internal_set_realtime_us(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.SpanAnnotation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::int64_t realtime_us_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};// -------------------------------------------------------------------

class RpczSpan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.RpczSpan) */ {
 public:
  inline RpczSpan() : RpczSpan(nullptr) {}
  ~RpczSpan() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpczSpan(::google::protobuf::internal::ConstantInitialized);

  inline RpczSpan(const RpczSpan& from)
      : RpczSpan(nullptr, from) {}
  RpczSpan(RpczSpan&& from) noexcept
    : RpczSpan() {
    *this = ::std::move(from);
  }

  inline RpczSpan& operator=(const RpczSpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpczSpan& operator=(RpczSpan&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpczSpan& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpczSpan* internal_default_instance() {
    return reinterpret_cast<const RpczSpan*>(
               &_RpczSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpczSpan& a, RpczSpan& b) {
    a.Swap(&b);
  }
  inline void Swap(RpczSpan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpczSpan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpczSpan* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpczSpan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpczSpan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RpczSpan& from) {
    RpczSpan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpczSpan* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.RpczSpan";
  }
  protected:
  explicit RpczSpan(::google::protobuf::Arena* arena);
  RpczSpan(::google::protobuf::Arena* arena, const RpczSpan& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientSpansFieldNumber = 21,
    kInfoFieldNumber = 20,
    kFullMethodNameFieldNumber = 22,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kParentSpanIdFieldNumber = 3,
    kLogIdFieldNumber = 4,
    kBaseCidFieldNumber = 5,
    kEndingCidFieldNumber = 6,
    kRemoteIpFieldNumber = 7,
    kRemotePortFieldNumber = 8,
    kTypeFieldNumber = 9,
    kAsyncFieldNumber = 10,
    kProtocolFieldNumber = 11,
    kErrorCodeFieldNumber = 12,
    kRequestSizeFieldNumber = 13,
    kResponseSizeFieldNumber = 14,
    kReceivedRealUsFieldNumber = 15,
    kStartParseRealUsFieldNumber = 16,
    kStartCallbackRealUsFieldNumber = 17,
    kStartSendRealUsFieldNumber = 18,
    kSentRealUsFieldNumber = 19,
  };
  // repeated .brpc.RpczSpan client_spans = 21;
  int client_spans_size() const;
  private:
  int _internal_client_spans_size() const;

  public:
  void clear_client_spans() ;
  ::brpc::RpczSpan* mutable_client_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >*
      mutable_client_spans();
  private:
  const ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>& _internal_client_spans() const;
  ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>* _internal_mutable_client_spans();
  public:
  const ::brpc::RpczSpan& client_spans(int index) const;
  ::brpc::RpczSpan* add_client_spans();
  const ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >&
      client_spans() const;
  // optional bytes info = 20;
  bool has_info() const;
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // optional bytes full_method_name = 22;
  bool has_full_method_name() const;
  void clear_full_method_name() ;
  const std::string& full_method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_method_name();
  PROTOBUF_NODISCARD std::string* release_full_method_name();
  void set_allocated_full_method_name(std::string* value);

  private:
  const std::string& _internal_full_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_method_name(
      const std::string& value);
  std::string* _internal_mutable_full_method_name();

  public:
  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::uint64_t trace_id() const;
  void set_trace_id(::uint64_t value);

  private:
  ::uint64_t _internal_trace_id() const;
  void _internal_set_trace_id(::uint64_t value);

  public:
  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id() ;
  ::uint64_t span_id() const;
  void set_span_id(::uint64_t value);

  private:
  ::uint64_t _internal_span_id() const;
  void _internal_set_span_id(::uint64_t value);

  public:
  // required uint64 parent_span_id = 3;
  bool has_parent_span_id() const;
  void clear_parent_span_id() ;
  ::uint64_t parent_span_id() const;
  void set_parent_span_id(::uint64_t value);

  private:
  ::uint64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::uint64_t value);

  public:
  // optional uint64 log_id = 4;
  bool has_log_id() const;
  void clear_log_id() ;
  ::uint64_t log_id() const;
  void set_log_id(::uint64_t value);

  private:
  ::uint64_t _internal_log_id() const;
  void _internal_set_log_id(::uint64_t value);

  public:
  // optional uint64 base_cid = 5;
  bool has_base_cid() const;
  void clear_base_cid() ;
  ::uint64_t base_cid() const;
  void set_base_cid(::uint64_t value);

  private:
  ::uint64_t _internal_base_cid() const;
  void _internal_set_base_cid(::uint64_t value);

  public:
  // optional uint64 ending_cid = 6;
  bool has_ending_cid() const;
  void clear_ending_cid() ;
  ::uint64_t ending_cid() const;
  void set_ending_cid(::uint64_t value);

  private:
  ::uint64_t _internal_ending_cid() const;
  void _internal_set_ending_cid(::uint64_t value);

  public:
  // optional uint32 remote_ip = 7;
  bool has_remote_ip() const;
  void clear_remote_ip() ;
  ::uint32_t remote_ip() const;
  void set_remote_ip(::uint32_t value);

  private:
  ::uint32_t _internal_remote_ip() const;
  void _internal_set_remote_ip(::uint32_t value);

  public:
  // optional uint32 remote_port = 8;
  bool has_remote_port() const;
  void clear_remote_port() ;
  ::uint32_t remote_port() const;
  void set_remote_port(::uint32_t value);

  private:
  ::uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(::uint32_t value);

  public:
  // optional .brpc.SpanType type = 9;
  bool has_type() const;
  void clear_type() ;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  private:
  ::brpc::SpanType _internal_type() const;
  void _internal_set_type(::brpc::SpanType value);

  public:
  // optional bool async = 10;
  bool has_async() const;
  void clear_async() ;
  bool async() const;
  void set_async(bool value);

  private:
  bool _internal_async() const;
  void _internal_set_async(bool value);

  public:
  // optional .brpc.ProtocolType protocol = 11;
  bool has_protocol() const;
  void clear_protocol() ;
  ::brpc::ProtocolType protocol() const;
  void set_protocol(::brpc::ProtocolType value);

  private:
  ::brpc::ProtocolType _internal_protocol() const;
  void _internal_set_protocol(::brpc::ProtocolType value);

  public:
  // optional int32 error_code = 12;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // optional int32 request_size = 13;
  bool has_request_size() const;
  void clear_request_size() ;
  ::int32_t request_size() const;
  void set_request_size(::int32_t value);

  private:
  ::int32_t _internal_request_size() const;
  void _internal_set_request_size(::int32_t value);

  public:
  // optional int32 response_size = 14;
  bool has_response_size() const;
  void clear_response_size() ;
  ::int32_t response_size() const;
  void set_response_size(::int32_t value);

  private:
  ::int32_t _internal_response_size() const;
  void _internal_set_response_size(::int32_t value);

  public:
  // optional int64 received_real_us = 15;
  bool has_received_real_us() const;
  void clear_received_real_us() ;
  ::int64_t received_real_us() const;
  void set_received_real_us(::int64_t value);

  private:
  ::int64_t _internal_received_real_us() const;
  void _internal_set_received_real_us(::int64_t value);

  public:
  // optional int64 start_parse_real_us = 16;
  bool has_start_parse_real_us() const;
  void clear_start_parse_real_us() ;
  ::int64_t start_parse_real_us() const;
  void set_start_parse_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_parse_real_us() const;
  void _internal_set_start_parse_real_us(::int64_t value);

  public:
  // optional int64 start_callback_real_us = 17;
  bool has_start_callback_real_us() const;
  void clear_start_callback_real_us() ;
  ::int64_t start_callback_real_us() const;
  void set_start_callback_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_callback_real_us() const;
  void _internal_set_start_callback_real_us(::int64_t value);

  public:
  // optional int64 start_send_real_us = 18;
  bool has_start_send_real_us() const;
  void clear_start_send_real_us() ;
  ::int64_t start_send_real_us() const;
  void set_start_send_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_send_real_us() const;
  void _internal_set_start_send_real_us(::int64_t value);

  public:
  // optional int64 sent_real_us = 19;
  bool has_sent_real_us() const;
  void clear_sent_real_us() ;
  ::int64_t sent_real_us() const;
  void set_sent_real_us(::int64_t value);

  private:
  ::int64_t _internal_sent_real_us() const;
  void _internal_set_sent_real_us(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.RpczSpan)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 22, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan > client_spans_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr full_method_name_;
    ::uint64_t trace_id_;
    ::uint64_t span_id_;
    ::uint64_t parent_span_id_;
    ::uint64_t log_id_;
    ::uint64_t base_cid_;
    ::uint64_t ending_cid_;
    ::uint32_t remote_ip_;
    ::uint32_t remote_port_;
    int type_;
    bool async_;
    int protocol_;
    ::int32_t error_code_;
    ::int32_t request_size_;
    ::int32_t response_size_;
    ::int64_t received_real_us_;
    ::int64_t start_parse_real_us_;
    ::int64_t start_callback_real_us_;
    ::int64_t start_send_real_us_;
    ::int64_t sent_real_us_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};// -------------------------------------------------------------------

class BriefSpan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.BriefSpan) */ {
 public:
  inline BriefSpan() : BriefSpan(nullptr) {}
  ~BriefSpan() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BriefSpan(::google::protobuf::internal::ConstantInitialized);

  inline BriefSpan(const BriefSpan& from)
      : BriefSpan(nullptr, from) {}
  BriefSpan(BriefSpan&& from) noexcept
    : BriefSpan() {
    *this = ::std::move(from);
  }

  inline BriefSpan& operator=(const BriefSpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline BriefSpan& operator=(BriefSpan&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BriefSpan& default_instance() {
    return *internal_default_instance();
  }
  static inline const BriefSpan* internal_default_instance() {
    return reinterpret_cast<const BriefSpan*>(
               &_BriefSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BriefSpan& a, BriefSpan& b) {
    a.Swap(&b);
  }
  inline void Swap(BriefSpan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BriefSpan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BriefSpan* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BriefSpan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BriefSpan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BriefSpan& from) {
    BriefSpan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BriefSpan* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.BriefSpan";
  }
  protected:
  explicit BriefSpan(::google::protobuf::Arena* arena);
  BriefSpan(::google::protobuf::Arena* arena, const BriefSpan& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullMethodNameFieldNumber = 10,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kLogIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kErrorCodeFieldNumber = 5,
    kRequestSizeFieldNumber = 6,
    kResponseSizeFieldNumber = 7,
    kStartRealUsFieldNumber = 8,
    kLatencyUsFieldNumber = 9,
  };
  // optional bytes full_method_name = 10;
  bool has_full_method_name() const;
  void clear_full_method_name() ;
  const std::string& full_method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_method_name();
  PROTOBUF_NODISCARD std::string* release_full_method_name();
  void set_allocated_full_method_name(std::string* value);

  private:
  const std::string& _internal_full_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_method_name(
      const std::string& value);
  std::string* _internal_mutable_full_method_name();

  public:
  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::uint64_t trace_id() const;
  void set_trace_id(::uint64_t value);

  private:
  ::uint64_t _internal_trace_id() const;
  void _internal_set_trace_id(::uint64_t value);

  public:
  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id() ;
  ::uint64_t span_id() const;
  void set_span_id(::uint64_t value);

  private:
  ::uint64_t _internal_span_id() const;
  void _internal_set_span_id(::uint64_t value);

  public:
  // optional uint64 log_id = 3;
  bool has_log_id() const;
  void clear_log_id() ;
  ::uint64_t log_id() const;
  void set_log_id(::uint64_t value);

  private:
  ::uint64_t _internal_log_id() const;
  void _internal_set_log_id(::uint64_t value);

  public:
  // optional .brpc.SpanType type = 4;
  bool has_type() const;
  void clear_type() ;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  private:
  ::brpc::SpanType _internal_type() const;
  void _internal_set_type(::brpc::SpanType value);

  public:
  // optional int32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // optional int32 request_size = 6;
  bool has_request_size() const;
  void clear_request_size() ;
  ::int32_t request_size() const;
  void set_request_size(::int32_t value);

  private:
  ::int32_t _internal_request_size() const;
  void _internal_set_request_size(::int32_t value);

  public:
  // optional int32 response_size = 7;
  bool has_response_size() const;
  void clear_response_size() ;
  ::int32_t response_size() const;
  void set_response_size(::int32_t value);

  private:
  ::int32_t _internal_response_size() const;
  void _internal_set_response_size(::int32_t value);

  public:
  // optional int64 start_real_us = 8;
  bool has_start_real_us() const;
  void clear_start_real_us() ;
  ::int64_t start_real_us() const;
  void set_start_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_real_us() const;
  void _internal_set_start_real_us(::int64_t value);

  public:
  // optional int64 latency_us = 9;
  bool has_latency_us() const;
  void clear_latency_us() ;
  ::int64_t latency_us() const;
  void set_latency_us(::int64_t value);

  private:
  ::int64_t _internal_latency_us() const;
  void _internal_set_latency_us(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.BriefSpan)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr full_method_name_;
    ::uint64_t trace_id_;
    ::uint64_t span_id_;
    ::uint64_t log_id_;
    int type_;
    ::int32_t error_code_;
    ::int32_t request_size_;
    ::int32_t response_size_;
    ::int64_t start_real_us_;
    ::int64_t latency_us_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};// -------------------------------------------------------------------

class TracingSpan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TracingSpan) */ {
 public:
  inline TracingSpan() : TracingSpan(nullptr) {}
  ~TracingSpan() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TracingSpan(::google::protobuf::internal::ConstantInitialized);

  inline TracingSpan(const TracingSpan& from)
      : TracingSpan(nullptr, from) {}
  TracingSpan(TracingSpan&& from) noexcept
    : TracingSpan() {
    *this = ::std::move(from);
  }

  inline TracingSpan& operator=(const TracingSpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingSpan& operator=(TracingSpan&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracingSpan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TracingSpan* internal_default_instance() {
    return reinterpret_cast<const TracingSpan*>(
               &_TracingSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TracingSpan& a, TracingSpan& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingSpan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracingSpan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracingSpan* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracingSpan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TracingSpan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TracingSpan& from) {
    TracingSpan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TracingSpan* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.TracingSpan";
  }
  protected:
  explicit TracingSpan(::google::protobuf::Arena* arena);
  TracingSpan(::google::protobuf::Arena* arena, const TracingSpan& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 18,
    kClientSpansFieldNumber = 19,
    kSpanNameFieldNumber = 17,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kParentSpanIdFieldNumber = 3,
    kLogIdFieldNumber = 4,
    kRemoteIpFieldNumber = 5,
    kRemotePortFieldNumber = 6,
    kTypeFieldNumber = 7,
    kProtocolFieldNumber = 8,
    kErrorCodeFieldNumber = 9,
    kRequestSizeFieldNumber = 10,
    kReceivedRealUsFieldNumber = 12,
    kStartParseRealUsFieldNumber = 13,
    kStartCallbackRealUsFieldNumber = 14,
    kStartSendRealUsFieldNumber = 15,
    kSentRealUsFieldNumber = 16,
    kResponseSizeFieldNumber = 11,
  };
  // repeated .brpc.SpanAnnotation annotations = 18;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;

  public:
  void clear_annotations() ;
  ::brpc::SpanAnnotation* mutable_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >*
      mutable_annotations();
  private:
  const ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>& _internal_annotations() const;
  ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>* _internal_mutable_annotations();
  public:
  const ::brpc::SpanAnnotation& annotations(int index) const;
  ::brpc::SpanAnnotation* add_annotations();
  const ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >&
      annotations() const;
  // repeated .brpc.TracingSpan client_spans = 19;
  int client_spans_size() const;
  private:
  int _internal_client_spans_size() const;

  public:
  void clear_client_spans() ;
  ::brpc::TracingSpan* mutable_client_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >*
      mutable_client_spans();
  private:
  const ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>& _internal_client_spans() const;
  ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>* _internal_mutable_client_spans();
  public:
  const ::brpc::TracingSpan& client_spans(int index) const;
  ::brpc::TracingSpan* add_client_spans();
  const ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >&
      client_spans() const;
  // optional string span_name = 17;
  bool has_span_name() const;
  void clear_span_name() ;
  const std::string& span_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_name(Arg_&& arg, Args_... args);
  std::string* mutable_span_name();
  PROTOBUF_NODISCARD std::string* release_span_name();
  void set_allocated_span_name(std::string* value);

  private:
  const std::string& _internal_span_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_name(
      const std::string& value);
  std::string* _internal_mutable_span_name();

  public:
  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::uint64_t trace_id() const;
  void set_trace_id(::uint64_t value);

  private:
  ::uint64_t _internal_trace_id() const;
  void _internal_set_trace_id(::uint64_t value);

  public:
  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id() ;
  ::uint64_t span_id() const;
  void set_span_id(::uint64_t value);

  private:
  ::uint64_t _internal_span_id() const;
  void _internal_set_span_id(::uint64_t value);

  public:
  // required uint64 parent_span_id = 3;
  bool has_parent_span_id() const;
  void clear_parent_span_id() ;
  ::uint64_t parent_span_id() const;
  void set_parent_span_id(::uint64_t value);

  private:
  ::uint64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::uint64_t value);

  public:
  // optional uint64 log_id = 4;
  bool has_log_id() const;
  void clear_log_id() ;
  ::uint64_t log_id() const;
  void set_log_id(::uint64_t value);

  private:
  ::uint64_t _internal_log_id() const;
  void _internal_set_log_id(::uint64_t value);

  public:
  // optional uint32 remote_ip = 5;
  bool has_remote_ip() const;
  void clear_remote_ip() ;
  ::uint32_t remote_ip() const;
  void set_remote_ip(::uint32_t value);

  private:
  ::uint32_t _internal_remote_ip() const;
  void _internal_set_remote_ip(::uint32_t value);

  public:
  // optional uint32 remote_port = 6;
  bool has_remote_port() const;
  void clear_remote_port() ;
  ::uint32_t remote_port() const;
  void set_remote_port(::uint32_t value);

  private:
  ::uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(::uint32_t value);

  public:
  // optional .brpc.SpanType type = 7;
  bool has_type() const;
  void clear_type() ;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  private:
  ::brpc::SpanType _internal_type() const;
  void _internal_set_type(::brpc::SpanType value);

  public:
  // optional .brpc.ProtocolType protocol = 8;
  bool has_protocol() const;
  void clear_protocol() ;
  ::brpc::ProtocolType protocol() const;
  void set_protocol(::brpc::ProtocolType value);

  private:
  ::brpc::ProtocolType _internal_protocol() const;
  void _internal_set_protocol(::brpc::ProtocolType value);

  public:
  // optional int32 error_code = 9;
  bool has_error_code() const;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // optional int32 request_size = 10;
  bool has_request_size() const;
  void clear_request_size() ;
  ::int32_t request_size() const;
  void set_request_size(::int32_t value);

  private:
  ::int32_t _internal_request_size() const;
  void _internal_set_request_size(::int32_t value);

  public:
  // optional int64 received_real_us = 12;
  bool has_received_real_us() const;
  void clear_received_real_us() ;
  ::int64_t received_real_us() const;
  void set_received_real_us(::int64_t value);

  private:
  ::int64_t _internal_received_real_us() const;
  void _internal_set_received_real_us(::int64_t value);

  public:
  // optional int64 start_parse_real_us = 13;
  bool has_start_parse_real_us() const;
  void clear_start_parse_real_us() ;
  ::int64_t start_parse_real_us() const;
  void set_start_parse_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_parse_real_us() const;
  void _internal_set_start_parse_real_us(::int64_t value);

  public:
  // optional int64 start_callback_real_us = 14;
  bool has_start_callback_real_us() const;
  void clear_start_callback_real_us() ;
  ::int64_t start_callback_real_us() const;
  void set_start_callback_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_callback_real_us() const;
  void _internal_set_start_callback_real_us(::int64_t value);

  public:
  // optional int64 start_send_real_us = 15;
  bool has_start_send_real_us() const;
  void clear_start_send_real_us() ;
  ::int64_t start_send_real_us() const;
  void set_start_send_real_us(::int64_t value);

  private:
  ::int64_t _internal_start_send_real_us() const;
  void _internal_set_start_send_real_us(::int64_t value);

  public:
  // optional int64 sent_real_us = 16;
  bool has_sent_real_us() const;
  void clear_sent_real_us() ;
  ::int64_t sent_real_us() const;
  void set_sent_real_us(::int64_t value);

  private:
  ::int64_t _internal_sent_real_us() const;
  void _internal_set_sent_real_us(::int64_t value);

  public:
  // optional int32 response_size = 11;
  bool has_response_size() const;
  void clear_response_size() ;
  ::int32_t response_size() const;
  void set_response_size(::int32_t value);

  private:
  ::int32_t _internal_response_size() const;
  void _internal_set_response_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.TracingSpan)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 4,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation > annotations_;
    ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan > client_spans_;
    ::google::protobuf::internal::ArenaStringPtr span_name_;
    ::uint64_t trace_id_;
    ::uint64_t span_id_;
    ::uint64_t parent_span_id_;
    ::uint64_t log_id_;
    ::uint32_t remote_ip_;
    ::uint32_t remote_port_;
    int type_;
    int protocol_;
    ::int32_t error_code_;
    ::int32_t request_size_;
    ::int64_t received_real_us_;
    ::int64_t start_parse_real_us_;
    ::int64_t start_callback_real_us_;
    ::int64_t start_send_real_us_;
    ::int64_t sent_real_us_;
    ::int32_t response_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpczSpan

// required uint64 trace_id = 1;
inline bool RpczSpan::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RpczSpan::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t RpczSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.trace_id)
  return _internal_trace_id();
}
inline void RpczSpan::set_trace_id(::uint64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.trace_id)
}
inline ::uint64_t RpczSpan::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void RpczSpan::_internal_set_trace_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool RpczSpan::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RpczSpan::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t RpczSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.span_id)
  return _internal_span_id();
}
inline void RpczSpan::set_span_id(::uint64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.span_id)
}
inline ::uint64_t RpczSpan::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void RpczSpan::_internal_set_span_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.span_id_ = value;
}

// required uint64 parent_span_id = 3;
inline bool RpczSpan::has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RpczSpan::clear_parent_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_span_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t RpczSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.parent_span_id)
  return _internal_parent_span_id();
}
inline void RpczSpan::set_parent_span_id(::uint64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.parent_span_id)
}
inline ::uint64_t RpczSpan::_internal_parent_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_span_id_;
}
inline void RpczSpan::_internal_set_parent_span_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.parent_span_id_ = value;
}

// optional uint64 log_id = 4;
inline bool RpczSpan::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RpczSpan::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t RpczSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.log_id)
  return _internal_log_id();
}
inline void RpczSpan::set_log_id(::uint64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.log_id)
}
inline ::uint64_t RpczSpan::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void RpczSpan::_internal_set_log_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.log_id_ = value;
}

// optional uint64 base_cid = 5;
inline bool RpczSpan::has_base_cid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RpczSpan::clear_base_cid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_cid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t RpczSpan::base_cid() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.base_cid)
  return _internal_base_cid();
}
inline void RpczSpan::set_base_cid(::uint64_t value) {
  _internal_set_base_cid(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.base_cid)
}
inline ::uint64_t RpczSpan::_internal_base_cid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_cid_;
}
inline void RpczSpan::_internal_set_base_cid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.base_cid_ = value;
}

// optional uint64 ending_cid = 6;
inline bool RpczSpan::has_ending_cid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RpczSpan::clear_ending_cid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ending_cid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t RpczSpan::ending_cid() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.ending_cid)
  return _internal_ending_cid();
}
inline void RpczSpan::set_ending_cid(::uint64_t value) {
  _internal_set_ending_cid(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.ending_cid)
}
inline ::uint64_t RpczSpan::_internal_ending_cid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ending_cid_;
}
inline void RpczSpan::_internal_set_ending_cid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ending_cid_ = value;
}

// optional uint32 remote_ip = 7;
inline bool RpczSpan::has_remote_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void RpczSpan::clear_remote_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t RpczSpan::remote_ip() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.remote_ip)
  return _internal_remote_ip();
}
inline void RpczSpan::set_remote_ip(::uint32_t value) {
  _internal_set_remote_ip(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.remote_ip)
}
inline ::uint32_t RpczSpan::_internal_remote_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_ip_;
}
inline void RpczSpan::_internal_set_remote_ip(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.remote_ip_ = value;
}

// optional uint32 remote_port = 8;
inline bool RpczSpan::has_remote_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void RpczSpan::clear_remote_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t RpczSpan::remote_port() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.remote_port)
  return _internal_remote_port();
}
inline void RpczSpan::set_remote_port(::uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.remote_port)
}
inline ::uint32_t RpczSpan::_internal_remote_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_port_;
}
inline void RpczSpan::_internal_set_remote_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.remote_port_ = value;
}

// optional .brpc.SpanType type = 9;
inline bool RpczSpan::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void RpczSpan::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::brpc::SpanType RpczSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.type)
  return _internal_type();
}
inline void RpczSpan::set_type(::brpc::SpanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.type)
}
inline ::brpc::SpanType RpczSpan::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::SpanType>(_impl_.type_);
}
inline void RpczSpan::_internal_set_type(::brpc::SpanType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::SpanType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.type_ = value;
}

// optional bool async = 10;
inline bool RpczSpan::has_async() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void RpczSpan::clear_async() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.async_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool RpczSpan::async() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.async)
  return _internal_async();
}
inline void RpczSpan::set_async(bool value) {
  _internal_set_async(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.async)
}
inline bool RpczSpan::_internal_async() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.async_;
}
inline void RpczSpan::_internal_set_async(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.async_ = value;
}

// optional .brpc.ProtocolType protocol = 11;
inline bool RpczSpan::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void RpczSpan::clear_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::brpc::ProtocolType RpczSpan::protocol() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.protocol)
  return _internal_protocol();
}
inline void RpczSpan::set_protocol(::brpc::ProtocolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.protocol)
}
inline ::brpc::ProtocolType RpczSpan::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::ProtocolType>(_impl_.protocol_);
}
inline void RpczSpan::_internal_set_protocol(::brpc::ProtocolType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::ProtocolType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.protocol_ = value;
}

// optional int32 error_code = 12;
inline bool RpczSpan::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void RpczSpan::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t RpczSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.error_code)
  return _internal_error_code();
}
inline void RpczSpan::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.error_code)
}
inline ::int32_t RpczSpan::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void RpczSpan::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.error_code_ = value;
}

// optional int32 request_size = 13;
inline bool RpczSpan::has_request_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void RpczSpan::clear_request_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t RpczSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.request_size)
  return _internal_request_size();
}
inline void RpczSpan::set_request_size(::int32_t value) {
  _internal_set_request_size(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.request_size)
}
inline ::int32_t RpczSpan::_internal_request_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_size_;
}
inline void RpczSpan::_internal_set_request_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.request_size_ = value;
}

// optional int32 response_size = 14;
inline bool RpczSpan::has_response_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void RpczSpan::clear_response_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t RpczSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.response_size)
  return _internal_response_size();
}
inline void RpczSpan::set_response_size(::int32_t value) {
  _internal_set_response_size(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.response_size)
}
inline ::int32_t RpczSpan::_internal_response_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_size_;
}
inline void RpczSpan::_internal_set_response_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.response_size_ = value;
}

// optional int64 received_real_us = 15;
inline bool RpczSpan::has_received_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void RpczSpan::clear_received_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.received_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t RpczSpan::received_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.received_real_us)
  return _internal_received_real_us();
}
inline void RpczSpan::set_received_real_us(::int64_t value) {
  _internal_set_received_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.received_real_us)
}
inline ::int64_t RpczSpan::_internal_received_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.received_real_us_;
}
inline void RpczSpan::_internal_set_received_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.received_real_us_ = value;
}

// optional int64 start_parse_real_us = 16;
inline bool RpczSpan::has_start_parse_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void RpczSpan::clear_start_parse_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_parse_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int64_t RpczSpan::start_parse_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_parse_real_us)
  return _internal_start_parse_real_us();
}
inline void RpczSpan::set_start_parse_real_us(::int64_t value) {
  _internal_set_start_parse_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_parse_real_us)
}
inline ::int64_t RpczSpan::_internal_start_parse_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_parse_real_us_;
}
inline void RpczSpan::_internal_set_start_parse_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.start_parse_real_us_ = value;
}

// optional int64 start_callback_real_us = 17;
inline bool RpczSpan::has_start_callback_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void RpczSpan::clear_start_callback_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_callback_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int64_t RpczSpan::start_callback_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_callback_real_us)
  return _internal_start_callback_real_us();
}
inline void RpczSpan::set_start_callback_real_us(::int64_t value) {
  _internal_set_start_callback_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_callback_real_us)
}
inline ::int64_t RpczSpan::_internal_start_callback_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_callback_real_us_;
}
inline void RpczSpan::_internal_set_start_callback_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.start_callback_real_us_ = value;
}

// optional int64 start_send_real_us = 18;
inline bool RpczSpan::has_start_send_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void RpczSpan::clear_start_send_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_send_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t RpczSpan::start_send_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_send_real_us)
  return _internal_start_send_real_us();
}
inline void RpczSpan::set_start_send_real_us(::int64_t value) {
  _internal_set_start_send_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_send_real_us)
}
inline ::int64_t RpczSpan::_internal_start_send_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_send_real_us_;
}
inline void RpczSpan::_internal_set_start_send_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.start_send_real_us_ = value;
}

// optional int64 sent_real_us = 19;
inline bool RpczSpan::has_sent_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void RpczSpan::clear_sent_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sent_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t RpczSpan::sent_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.sent_real_us)
  return _internal_sent_real_us();
}
inline void RpczSpan::set_sent_real_us(::int64_t value) {
  _internal_set_sent_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.sent_real_us)
}
inline ::int64_t RpczSpan::_internal_sent_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sent_real_us_;
}
inline void RpczSpan::_internal_set_sent_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.sent_real_us_ = value;
}

// optional bytes info = 20;
inline bool RpczSpan::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpczSpan::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpczSpan::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpczSpan::set_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.info)
}
inline std::string* RpczSpan::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.info)
  return _s;
}
inline const std::string& RpczSpan::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.info_.Get();
}
inline void RpczSpan::_internal_set_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArena());
}
inline std::string* RpczSpan::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* RpczSpan::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpczSpan.info)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.info_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpczSpan::set_allocated_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpczSpan.info)
}

// repeated .brpc.RpczSpan client_spans = 21;
inline int RpczSpan::_internal_client_spans_size() const {
  return _internal_client_spans().size();
}
inline int RpczSpan::client_spans_size() const {
  return _internal_client_spans_size();
}
inline void RpczSpan::clear_client_spans() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_spans_.Clear();
}
inline ::brpc::RpczSpan* RpczSpan::mutable_client_spans(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.client_spans)
  return _internal_mutable_client_spans()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>* RpczSpan::mutable_client_spans()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:brpc.RpczSpan.client_spans)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_client_spans();
}
inline const ::brpc::RpczSpan& RpczSpan::client_spans(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.client_spans)
  return _internal_client_spans().Get(index);
}
inline ::brpc::RpczSpan* RpczSpan::add_client_spans() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::brpc::RpczSpan* _add = _internal_mutable_client_spans()->Add();
  // @@protoc_insertion_point(field_add:brpc.RpczSpan.client_spans)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>& RpczSpan::client_spans() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:brpc.RpczSpan.client_spans)
  return _internal_client_spans();
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>&
RpczSpan::_internal_client_spans() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_spans_;
}
inline ::google::protobuf::RepeatedPtrField<::brpc::RpczSpan>*
RpczSpan::_internal_mutable_client_spans() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.client_spans_;
}

// optional bytes full_method_name = 22;
inline bool RpczSpan::has_full_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpczSpan::clear_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.full_method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpczSpan::full_method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.full_method_name)
  return _internal_full_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpczSpan::set_full_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.full_method_name_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.full_method_name)
}
inline std::string* RpczSpan::mutable_full_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_full_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.full_method_name)
  return _s;
}
inline const std::string& RpczSpan::_internal_full_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.full_method_name_.Get();
}
inline void RpczSpan::_internal_set_full_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.full_method_name_.Set(value, GetArena());
}
inline std::string* RpczSpan::_internal_mutable_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.full_method_name_.Mutable( GetArena());
}
inline std::string* RpczSpan::release_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.RpczSpan.full_method_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.full_method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpczSpan::set_allocated_full_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.full_method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_method_name_.IsDefault()) {
          _impl_.full_method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.RpczSpan.full_method_name)
}

// -------------------------------------------------------------------

// BriefSpan

// required uint64 trace_id = 1;
inline bool BriefSpan::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BriefSpan::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t BriefSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.trace_id)
  return _internal_trace_id();
}
inline void BriefSpan::set_trace_id(::uint64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.trace_id)
}
inline ::uint64_t BriefSpan::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void BriefSpan::_internal_set_trace_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool BriefSpan::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BriefSpan::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t BriefSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.span_id)
  return _internal_span_id();
}
inline void BriefSpan::set_span_id(::uint64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.span_id)
}
inline ::uint64_t BriefSpan::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void BriefSpan::_internal_set_span_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.span_id_ = value;
}

// optional uint64 log_id = 3;
inline bool BriefSpan::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BriefSpan::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t BriefSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.log_id)
  return _internal_log_id();
}
inline void BriefSpan::set_log_id(::uint64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.log_id)
}
inline ::uint64_t BriefSpan::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void BriefSpan::_internal_set_log_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.log_id_ = value;
}

// optional .brpc.SpanType type = 4;
inline bool BriefSpan::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BriefSpan::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::brpc::SpanType BriefSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.type)
  return _internal_type();
}
inline void BriefSpan::set_type(::brpc::SpanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.type)
}
inline ::brpc::SpanType BriefSpan::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::SpanType>(_impl_.type_);
}
inline void BriefSpan::_internal_set_type(::brpc::SpanType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::SpanType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}

// optional int32 error_code = 5;
inline bool BriefSpan::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BriefSpan::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t BriefSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.error_code)
  return _internal_error_code();
}
inline void BriefSpan::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.error_code)
}
inline ::int32_t BriefSpan::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void BriefSpan::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.error_code_ = value;
}

// optional int32 request_size = 6;
inline bool BriefSpan::has_request_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BriefSpan::clear_request_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t BriefSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.request_size)
  return _internal_request_size();
}
inline void BriefSpan::set_request_size(::int32_t value) {
  _internal_set_request_size(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.request_size)
}
inline ::int32_t BriefSpan::_internal_request_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_size_;
}
inline void BriefSpan::_internal_set_request_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.request_size_ = value;
}

// optional int32 response_size = 7;
inline bool BriefSpan::has_response_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void BriefSpan::clear_response_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t BriefSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.response_size)
  return _internal_response_size();
}
inline void BriefSpan::set_response_size(::int32_t value) {
  _internal_set_response_size(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.response_size)
}
inline ::int32_t BriefSpan::_internal_response_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_size_;
}
inline void BriefSpan::_internal_set_response_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.response_size_ = value;
}

// optional int64 start_real_us = 8;
inline bool BriefSpan::has_start_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void BriefSpan::clear_start_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t BriefSpan::start_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.start_real_us)
  return _internal_start_real_us();
}
inline void BriefSpan::set_start_real_us(::int64_t value) {
  _internal_set_start_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.start_real_us)
}
inline ::int64_t BriefSpan::_internal_start_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_real_us_;
}
inline void BriefSpan::_internal_set_start_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.start_real_us_ = value;
}

// optional int64 latency_us = 9;
inline bool BriefSpan::has_latency_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void BriefSpan::clear_latency_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latency_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t BriefSpan::latency_us() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.latency_us)
  return _internal_latency_us();
}
inline void BriefSpan::set_latency_us(::int64_t value) {
  _internal_set_latency_us(value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.latency_us)
}
inline ::int64_t BriefSpan::_internal_latency_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latency_us_;
}
inline void BriefSpan::_internal_set_latency_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.latency_us_ = value;
}

// optional bytes full_method_name = 10;
inline bool BriefSpan::has_full_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BriefSpan::clear_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.full_method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BriefSpan::full_method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.full_method_name)
  return _internal_full_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BriefSpan::set_full_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_method_name_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.full_method_name)
}
inline std::string* BriefSpan::mutable_full_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_full_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.BriefSpan.full_method_name)
  return _s;
}
inline const std::string& BriefSpan::_internal_full_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.full_method_name_.Get();
}
inline void BriefSpan::_internal_set_full_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_method_name_.Set(value, GetArena());
}
inline std::string* BriefSpan::_internal_mutable_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.full_method_name_.Mutable( GetArena());
}
inline std::string* BriefSpan::release_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.BriefSpan.full_method_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.full_method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BriefSpan::set_allocated_full_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.full_method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_method_name_.IsDefault()) {
          _impl_.full_method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.BriefSpan.full_method_name)
}

// -------------------------------------------------------------------

// SpanAnnotation

// required int64 realtime_us = 1;
inline bool SpanAnnotation::has_realtime_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SpanAnnotation::clear_realtime_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.realtime_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SpanAnnotation::realtime_us() const {
  // @@protoc_insertion_point(field_get:brpc.SpanAnnotation.realtime_us)
  return _internal_realtime_us();
}
inline void SpanAnnotation::set_realtime_us(::int64_t value) {
  _internal_set_realtime_us(value);
  // @@protoc_insertion_point(field_set:brpc.SpanAnnotation.realtime_us)
}
inline ::int64_t SpanAnnotation::_internal_realtime_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.realtime_us_;
}
inline void SpanAnnotation::_internal_set_realtime_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.realtime_us_ = value;
}

// required string content = 2;
inline bool SpanAnnotation::has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SpanAnnotation::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpanAnnotation::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.SpanAnnotation.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpanAnnotation::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.SpanAnnotation.content)
}
inline std::string* SpanAnnotation::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:brpc.SpanAnnotation.content)
  return _s;
}
inline const std::string& SpanAnnotation::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void SpanAnnotation::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* SpanAnnotation::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* SpanAnnotation::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.SpanAnnotation.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SpanAnnotation::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.SpanAnnotation.content)
}

// -------------------------------------------------------------------

// TracingSpan

// required uint64 trace_id = 1;
inline bool TracingSpan::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TracingSpan::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TracingSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.trace_id)
  return _internal_trace_id();
}
inline void TracingSpan::set_trace_id(::uint64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.trace_id)
}
inline ::uint64_t TracingSpan::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void TracingSpan::_internal_set_trace_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool TracingSpan::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TracingSpan::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t TracingSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.span_id)
  return _internal_span_id();
}
inline void TracingSpan::set_span_id(::uint64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.span_id)
}
inline ::uint64_t TracingSpan::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void TracingSpan::_internal_set_span_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.span_id_ = value;
}

// required uint64 parent_span_id = 3;
inline bool TracingSpan::has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TracingSpan::clear_parent_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_span_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TracingSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.parent_span_id)
  return _internal_parent_span_id();
}
inline void TracingSpan::set_parent_span_id(::uint64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.parent_span_id)
}
inline ::uint64_t TracingSpan::_internal_parent_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_span_id_;
}
inline void TracingSpan::_internal_set_parent_span_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.parent_span_id_ = value;
}

// optional uint64 log_id = 4;
inline bool TracingSpan::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TracingSpan::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t TracingSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.log_id)
  return _internal_log_id();
}
inline void TracingSpan::set_log_id(::uint64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.log_id)
}
inline ::uint64_t TracingSpan::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void TracingSpan::_internal_set_log_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.log_id_ = value;
}

// optional uint32 remote_ip = 5;
inline bool TracingSpan::has_remote_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TracingSpan::clear_remote_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t TracingSpan::remote_ip() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.remote_ip)
  return _internal_remote_ip();
}
inline void TracingSpan::set_remote_ip(::uint32_t value) {
  _internal_set_remote_ip(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.remote_ip)
}
inline ::uint32_t TracingSpan::_internal_remote_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_ip_;
}
inline void TracingSpan::_internal_set_remote_ip(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.remote_ip_ = value;
}

// optional uint32 remote_port = 6;
inline bool TracingSpan::has_remote_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TracingSpan::clear_remote_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t TracingSpan::remote_port() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.remote_port)
  return _internal_remote_port();
}
inline void TracingSpan::set_remote_port(::uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.remote_port)
}
inline ::uint32_t TracingSpan::_internal_remote_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_port_;
}
inline void TracingSpan::_internal_set_remote_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.remote_port_ = value;
}

// optional .brpc.SpanType type = 7;
inline bool TracingSpan::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TracingSpan::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::SpanType TracingSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.type)
  return _internal_type();
}
inline void TracingSpan::set_type(::brpc::SpanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.type)
}
inline ::brpc::SpanType TracingSpan::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::SpanType>(_impl_.type_);
}
inline void TracingSpan::_internal_set_type(::brpc::SpanType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::SpanType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_ = value;
}

// optional .brpc.ProtocolType protocol = 8;
inline bool TracingSpan::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TracingSpan::clear_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::brpc::ProtocolType TracingSpan::protocol() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.protocol)
  return _internal_protocol();
}
inline void TracingSpan::set_protocol(::brpc::ProtocolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.protocol)
}
inline ::brpc::ProtocolType TracingSpan::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::ProtocolType>(_impl_.protocol_);
}
inline void TracingSpan::_internal_set_protocol(::brpc::ProtocolType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::ProtocolType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.protocol_ = value;
}

// optional int32 error_code = 9;
inline bool TracingSpan::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void TracingSpan::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t TracingSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.error_code)
  return _internal_error_code();
}
inline void TracingSpan::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.error_code)
}
inline ::int32_t TracingSpan::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline void TracingSpan::_internal_set_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.error_code_ = value;
}

// optional int32 request_size = 10;
inline bool TracingSpan::has_request_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void TracingSpan::clear_request_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t TracingSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.request_size)
  return _internal_request_size();
}
inline void TracingSpan::set_request_size(::int32_t value) {
  _internal_set_request_size(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.request_size)
}
inline ::int32_t TracingSpan::_internal_request_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_size_;
}
inline void TracingSpan::_internal_set_request_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.request_size_ = value;
}

// optional int32 response_size = 11;
inline bool TracingSpan::has_response_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void TracingSpan::clear_response_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t TracingSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.response_size)
  return _internal_response_size();
}
inline void TracingSpan::set_response_size(::int32_t value) {
  _internal_set_response_size(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.response_size)
}
inline ::int32_t TracingSpan::_internal_response_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_size_;
}
inline void TracingSpan::_internal_set_response_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.response_size_ = value;
}

// optional int64 received_real_us = 12;
inline bool TracingSpan::has_received_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TracingSpan::clear_received_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.received_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t TracingSpan::received_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.received_real_us)
  return _internal_received_real_us();
}
inline void TracingSpan::set_received_real_us(::int64_t value) {
  _internal_set_received_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.received_real_us)
}
inline ::int64_t TracingSpan::_internal_received_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.received_real_us_;
}
inline void TracingSpan::_internal_set_received_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.received_real_us_ = value;
}

// optional int64 start_parse_real_us = 13;
inline bool TracingSpan::has_start_parse_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TracingSpan::clear_start_parse_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_parse_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t TracingSpan::start_parse_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_parse_real_us)
  return _internal_start_parse_real_us();
}
inline void TracingSpan::set_start_parse_real_us(::int64_t value) {
  _internal_set_start_parse_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_parse_real_us)
}
inline ::int64_t TracingSpan::_internal_start_parse_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_parse_real_us_;
}
inline void TracingSpan::_internal_set_start_parse_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.start_parse_real_us_ = value;
}

// optional int64 start_callback_real_us = 14;
inline bool TracingSpan::has_start_callback_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TracingSpan::clear_start_callback_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_callback_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t TracingSpan::start_callback_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_callback_real_us)
  return _internal_start_callback_real_us();
}
inline void TracingSpan::set_start_callback_real_us(::int64_t value) {
  _internal_set_start_callback_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_callback_real_us)
}
inline ::int64_t TracingSpan::_internal_start_callback_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_callback_real_us_;
}
inline void TracingSpan::_internal_set_start_callback_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.start_callback_real_us_ = value;
}

// optional int64 start_send_real_us = 15;
inline bool TracingSpan::has_start_send_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TracingSpan::clear_start_send_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_send_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int64_t TracingSpan::start_send_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_send_real_us)
  return _internal_start_send_real_us();
}
inline void TracingSpan::set_start_send_real_us(::int64_t value) {
  _internal_set_start_send_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_send_real_us)
}
inline ::int64_t TracingSpan::_internal_start_send_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_send_real_us_;
}
inline void TracingSpan::_internal_set_start_send_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.start_send_real_us_ = value;
}

// optional int64 sent_real_us = 16;
inline bool TracingSpan::has_sent_real_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TracingSpan::clear_sent_real_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sent_real_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int64_t TracingSpan::sent_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.sent_real_us)
  return _internal_sent_real_us();
}
inline void TracingSpan::set_sent_real_us(::int64_t value) {
  _internal_set_sent_real_us(value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.sent_real_us)
}
inline ::int64_t TracingSpan::_internal_sent_real_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sent_real_us_;
}
inline void TracingSpan::_internal_set_sent_real_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.sent_real_us_ = value;
}

// optional string span_name = 17;
inline bool TracingSpan::has_span_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TracingSpan::clear_span_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TracingSpan::span_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.span_name)
  return _internal_span_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TracingSpan::set_span_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.span_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.span_name)
}
inline std::string* TracingSpan::mutable_span_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_span_name();
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.span_name)
  return _s;
}
inline const std::string& TracingSpan::_internal_span_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_name_.Get();
}
inline void TracingSpan::_internal_set_span_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.span_name_.Set(value, GetArena());
}
inline std::string* TracingSpan::_internal_mutable_span_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.span_name_.Mutable( GetArena());
}
inline std::string* TracingSpan::release_span_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.TracingSpan.span_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.span_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TracingSpan::set_allocated_span_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.span_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_name_.IsDefault()) {
          _impl_.span_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.TracingSpan.span_name)
}

// repeated .brpc.SpanAnnotation annotations = 18;
inline int TracingSpan::_internal_annotations_size() const {
  return _internal_annotations().size();
}
inline int TracingSpan::annotations_size() const {
  return _internal_annotations_size();
}
inline void TracingSpan::clear_annotations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.annotations_.Clear();
}
inline ::brpc::SpanAnnotation* TracingSpan::mutable_annotations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.annotations)
  return _internal_mutable_annotations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>* TracingSpan::mutable_annotations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:brpc.TracingSpan.annotations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_annotations();
}
inline const ::brpc::SpanAnnotation& TracingSpan::annotations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.annotations)
  return _internal_annotations().Get(index);
}
inline ::brpc::SpanAnnotation* TracingSpan::add_annotations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::brpc::SpanAnnotation* _add = _internal_mutable_annotations()->Add();
  // @@protoc_insertion_point(field_add:brpc.TracingSpan.annotations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>& TracingSpan::annotations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:brpc.TracingSpan.annotations)
  return _internal_annotations();
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>&
TracingSpan::_internal_annotations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.annotations_;
}
inline ::google::protobuf::RepeatedPtrField<::brpc::SpanAnnotation>*
TracingSpan::_internal_mutable_annotations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.annotations_;
}

// repeated .brpc.TracingSpan client_spans = 19;
inline int TracingSpan::_internal_client_spans_size() const {
  return _internal_client_spans().size();
}
inline int TracingSpan::client_spans_size() const {
  return _internal_client_spans_size();
}
inline void TracingSpan::clear_client_spans() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_spans_.Clear();
}
inline ::brpc::TracingSpan* TracingSpan::mutable_client_spans(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.client_spans)
  return _internal_mutable_client_spans()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>* TracingSpan::mutable_client_spans()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:brpc.TracingSpan.client_spans)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_client_spans();
}
inline const ::brpc::TracingSpan& TracingSpan::client_spans(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.client_spans)
  return _internal_client_spans().Get(index);
}
inline ::brpc::TracingSpan* TracingSpan::add_client_spans() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::brpc::TracingSpan* _add = _internal_mutable_client_spans()->Add();
  // @@protoc_insertion_point(field_add:brpc.TracingSpan.client_spans)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>& TracingSpan::client_spans() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:brpc.TracingSpan.client_spans)
  return _internal_client_spans();
}
inline const ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>&
TracingSpan::_internal_client_spans() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_spans_;
}
inline ::google::protobuf::RepeatedPtrField<::brpc::TracingSpan>*
TracingSpan::_internal_mutable_client_spans() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.client_spans_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::brpc::SpanType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::SpanType>() {
  return ::brpc::SpanType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fspan_2eproto_2epb_2eh
