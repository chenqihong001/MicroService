// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/options.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2foptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2foptions_2eproto;
namespace brpc {
class ChunkInfo;
struct ChunkInfoDefaultTypeInternal;
extern ChunkInfoDefaultTypeInternal _ChunkInfo_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
enum TalkType : int {
  TALK_TYPE_NORMAL = 0,
  TALK_TYPE_ONEWAY = 1,
};

bool TalkType_IsValid(int value);
extern const uint32_t TalkType_internal_data_[];
constexpr TalkType TalkType_MIN = static_cast<TalkType>(0);
constexpr TalkType TalkType_MAX = static_cast<TalkType>(1);
constexpr int TalkType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
TalkType_descriptor();
template <typename T>
const std::string& TalkType_Name(T value) {
  static_assert(std::is_same<T, TalkType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TalkType_Name().");
  return TalkType_Name(static_cast<TalkType>(value));
}
template <>
inline const std::string& TalkType_Name(TalkType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TalkType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TalkType_Parse(absl::string_view name, TalkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TalkType>(
      TalkType_descriptor(), name, value);
}
enum ConnectionType : int {
  CONNECTION_TYPE_UNKNOWN = 0,
  CONNECTION_TYPE_SINGLE = 1,
  CONNECTION_TYPE_POOLED = 2,
  CONNECTION_TYPE_SHORT = 4,
};

bool ConnectionType_IsValid(int value);
extern const uint32_t ConnectionType_internal_data_[];
constexpr ConnectionType ConnectionType_MIN = static_cast<ConnectionType>(0);
constexpr ConnectionType ConnectionType_MAX = static_cast<ConnectionType>(4);
constexpr int ConnectionType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ConnectionType_descriptor();
template <typename T>
const std::string& ConnectionType_Name(T value) {
  static_assert(std::is_same<T, ConnectionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConnectionType_Name().");
  return ConnectionType_Name(static_cast<ConnectionType>(value));
}
template <>
inline const std::string& ConnectionType_Name(ConnectionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConnectionType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ConnectionType_Parse(absl::string_view name, ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionType>(
      ConnectionType_descriptor(), name, value);
}
enum ProtocolType : int {
  PROTOCOL_UNKNOWN = 0,
  PROTOCOL_BAIDU_STD = 1,
  PROTOCOL_STREAMING_RPC = 2,
  PROTOCOL_HULU_PBRPC = 3,
  PROTOCOL_SOFA_PBRPC = 4,
  PROTOCOL_RTMP = 5,
  PROTOCOL_THRIFT = 6,
  PROTOCOL_HTTP = 7,
  PROTOCOL_PUBLIC_PBRPC = 8,
  PROTOCOL_NOVA_PBRPC = 9,
  PROTOCOL_REDIS = 10,
  PROTOCOL_NSHEAD_CLIENT = 11,
  PROTOCOL_NSHEAD = 12,
  PROTOCOL_HADOOP_RPC = 13,
  PROTOCOL_HADOOP_SERVER_RPC = 14,
  PROTOCOL_MONGO = 15,
  PROTOCOL_UBRPC_COMPACK = 16,
  PROTOCOL_DIDX_CLIENT = 17,
  PROTOCOL_MEMCACHE = 18,
  PROTOCOL_ITP = 19,
  PROTOCOL_NSHEAD_MCPACK = 20,
  PROTOCOL_DISP_IDL = 21,
  PROTOCOL_ERSDA_CLIENT = 22,
  PROTOCOL_UBRPC_MCPACK2 = 23,
  PROTOCOL_CDS_AGENT = 24,
  PROTOCOL_ESP = 25,
  PROTOCOL_H2 = 26,
};

bool ProtocolType_IsValid(int value);
extern const uint32_t ProtocolType_internal_data_[];
constexpr ProtocolType ProtocolType_MIN = static_cast<ProtocolType>(0);
constexpr ProtocolType ProtocolType_MAX = static_cast<ProtocolType>(26);
constexpr int ProtocolType_ARRAYSIZE = 26 + 1;
const ::google::protobuf::EnumDescriptor*
ProtocolType_descriptor();
template <typename T>
const std::string& ProtocolType_Name(T value) {
  static_assert(std::is_same<T, ProtocolType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtocolType_Name().");
  return ProtocolType_Name(static_cast<ProtocolType>(value));
}
template <>
inline const std::string& ProtocolType_Name(ProtocolType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtocolType_descriptor,
                                                 0, 26>(
      static_cast<int>(value));
}
inline bool ProtocolType_Parse(absl::string_view name, ProtocolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolType>(
      ProtocolType_descriptor(), name, value);
}
enum CompressType : int {
  COMPRESS_TYPE_NONE = 0,
  COMPRESS_TYPE_SNAPPY = 1,
  COMPRESS_TYPE_GZIP = 2,
  COMPRESS_TYPE_ZLIB = 3,
  COMPRESS_TYPE_LZ4 = 4,
};

bool CompressType_IsValid(int value);
extern const uint32_t CompressType_internal_data_[];
constexpr CompressType CompressType_MIN = static_cast<CompressType>(0);
constexpr CompressType CompressType_MAX = static_cast<CompressType>(4);
constexpr int CompressType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
CompressType_descriptor();
template <typename T>
const std::string& CompressType_Name(T value) {
  static_assert(std::is_same<T, CompressType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CompressType_Name().");
  return CompressType_Name(static_cast<CompressType>(value));
}
template <>
inline const std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CompressType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool CompressType_Parse(absl::string_view name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
      CompressType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChunkInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.ChunkInfo) */ {
 public:
  inline ChunkInfo() : ChunkInfo(nullptr) {}
  ~ChunkInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkInfo(::google::protobuf::internal::ConstantInitialized);

  inline ChunkInfo(const ChunkInfo& from)
      : ChunkInfo(nullptr, from) {}
  ChunkInfo(ChunkInfo&& from) noexcept
    : ChunkInfo() {
    *this = ::std::move(from);
  }

  inline ChunkInfo& operator=(const ChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkInfo& operator=(ChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkInfo* internal_default_instance() {
    return reinterpret_cast<const ChunkInfo*>(
               &_ChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChunkInfo& a, ChunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChunkInfo& from) {
    ChunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChunkInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.ChunkInfo";
  }
  protected:
  explicit ChunkInfo(::google::protobuf::Arena* arena);
  ChunkInfo(::google::protobuf::Arena* arena, const ChunkInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kChunkIdFieldNumber = 2,
  };
  // required int64 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id() ;
  ::int64_t stream_id() const;
  void set_stream_id(::int64_t value);

  private:
  ::int64_t _internal_stream_id() const;
  void _internal_set_stream_id(::int64_t value);

  public:
  // required int64 chunk_id = 2;
  bool has_chunk_id() const;
  void clear_chunk_id() ;
  ::int64_t chunk_id() const;
  void set_chunk_id(::int64_t value);

  private:
  ::int64_t _internal_chunk_id() const;
  void _internal_set_chunk_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.ChunkInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t stream_id_;
    ::int64_t chunk_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2foptions_2eproto;
};

// ===================================================================



static const int kServiceTimeoutFieldNumber = 90000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::int64_t >, 3, false >
  service_timeout;
static const int kRequestTalkTypeFieldNumber = 90001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  request_talk_type;
static const int kResponseTalkTypeFieldNumber = 90002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  response_talk_type;
static const int kMethodTimeoutFieldNumber = 90003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::int64_t >, 3, false >
  method_timeout;
static const int kRequestCompressionFieldNumber = 90004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  request_compression;
static const int kResponseCompressionFieldNumber = 90005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  response_compression;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChunkInfo

// required int64 stream_id = 1;
inline bool ChunkInfo::has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChunkInfo::clear_stream_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stream_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ChunkInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.ChunkInfo.stream_id)
  return _internal_stream_id();
}
inline void ChunkInfo::set_stream_id(::int64_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:brpc.ChunkInfo.stream_id)
}
inline ::int64_t ChunkInfo::_internal_stream_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stream_id_;
}
inline void ChunkInfo::_internal_set_stream_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_ = value;
}

// required int64 chunk_id = 2;
inline bool ChunkInfo::has_chunk_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChunkInfo::clear_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t ChunkInfo::chunk_id() const {
  // @@protoc_insertion_point(field_get:brpc.ChunkInfo.chunk_id)
  return _internal_chunk_id();
}
inline void ChunkInfo::set_chunk_id(::int64_t value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:brpc.ChunkInfo.chunk_id)
}
inline ::int64_t ChunkInfo::_internal_chunk_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_id_;
}
inline void ChunkInfo::_internal_set_chunk_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chunk_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::brpc::TalkType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::TalkType>() {
  return ::brpc::TalkType_descriptor();
}
template <>
struct is_proto_enum<::brpc::ConnectionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::ConnectionType>() {
  return ::brpc::ConnectionType_descriptor();
}
template <>
struct is_proto_enum<::brpc::ProtocolType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::ProtocolType>() {
  return ::brpc::ProtocolType_descriptor();
}
template <>
struct is_proto_enum<::brpc::CompressType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::CompressType>() {
  return ::brpc::CompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2foptions_2eproto_2epb_2eh
