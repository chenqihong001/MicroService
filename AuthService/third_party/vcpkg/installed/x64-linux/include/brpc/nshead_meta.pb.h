// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2fnshead_5fmeta_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fnshead_5fmeta_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2fnshead_5fmeta_2eproto;
namespace brpc {
class NsheadMeta;
struct NsheadMetaDefaultTypeInternal;
extern NsheadMetaDefaultTypeInternal _NsheadMeta_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {

// ===================================================================


// -------------------------------------------------------------------

class NsheadMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.NsheadMeta) */ {
 public:
  inline NsheadMeta() : NsheadMeta(nullptr) {}
  ~NsheadMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NsheadMeta(::google::protobuf::internal::ConstantInitialized);

  inline NsheadMeta(const NsheadMeta& from)
      : NsheadMeta(nullptr, from) {}
  NsheadMeta(NsheadMeta&& from) noexcept
    : NsheadMeta() {
    *this = ::std::move(from);
  }

  inline NsheadMeta& operator=(const NsheadMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline NsheadMeta& operator=(NsheadMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NsheadMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const NsheadMeta* internal_default_instance() {
    return reinterpret_cast<const NsheadMeta*>(
               &_NsheadMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NsheadMeta& a, NsheadMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(NsheadMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NsheadMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NsheadMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NsheadMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NsheadMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NsheadMeta& from) {
    NsheadMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NsheadMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.NsheadMeta";
  }
  protected:
  explicit NsheadMeta(::google::protobuf::Arena* arena);
  NsheadMeta(::google::protobuf::Arena* arena, const NsheadMeta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullMethodNameFieldNumber = 1,
    kUserStringFieldNumber = 9,
    kCorrelationIdFieldNumber = 2,
    kLogIdFieldNumber = 3,
    kAttachmentSizeFieldNumber = 4,
    kCompressTypeFieldNumber = 5,
    kTraceIdFieldNumber = 6,
    kSpanIdFieldNumber = 7,
    kParentSpanIdFieldNumber = 8,
  };
  // required string full_method_name = 1;
  bool has_full_method_name() const;
  void clear_full_method_name() ;
  const std::string& full_method_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_method_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_method_name();
  PROTOBUF_NODISCARD std::string* release_full_method_name();
  void set_allocated_full_method_name(std::string* value);

  private:
  const std::string& _internal_full_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_method_name(
      const std::string& value);
  std::string* _internal_mutable_full_method_name();

  public:
  // optional bytes user_string = 9;
  bool has_user_string() const;
  void clear_user_string() ;
  const std::string& user_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_string(Arg_&& arg, Args_... args);
  std::string* mutable_user_string();
  PROTOBUF_NODISCARD std::string* release_user_string();
  void set_allocated_user_string(std::string* value);

  private:
  const std::string& _internal_user_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_string(
      const std::string& value);
  std::string* _internal_mutable_user_string();

  public:
  // optional int64 correlation_id = 2;
  bool has_correlation_id() const;
  void clear_correlation_id() ;
  ::int64_t correlation_id() const;
  void set_correlation_id(::int64_t value);

  private:
  ::int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(::int64_t value);

  public:
  // optional int64 log_id = 3;
  bool has_log_id() const;
  void clear_log_id() ;
  ::int64_t log_id() const;
  void set_log_id(::int64_t value);

  private:
  ::int64_t _internal_log_id() const;
  void _internal_set_log_id(::int64_t value);

  public:
  // optional int32 attachment_size = 4;
  bool has_attachment_size() const;
  void clear_attachment_size() ;
  ::int32_t attachment_size() const;
  void set_attachment_size(::int32_t value);

  private:
  ::int32_t _internal_attachment_size() const;
  void _internal_set_attachment_size(::int32_t value);

  public:
  // optional .brpc.CompressType compress_type = 5;
  bool has_compress_type() const;
  void clear_compress_type() ;
  ::brpc::CompressType compress_type() const;
  void set_compress_type(::brpc::CompressType value);

  private:
  ::brpc::CompressType _internal_compress_type() const;
  void _internal_set_compress_type(::brpc::CompressType value);

  public:
  // optional int64 trace_id = 6;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::int64_t trace_id() const;
  void set_trace_id(::int64_t value);

  private:
  ::int64_t _internal_trace_id() const;
  void _internal_set_trace_id(::int64_t value);

  public:
  // optional int64 span_id = 7;
  bool has_span_id() const;
  void clear_span_id() ;
  ::int64_t span_id() const;
  void set_span_id(::int64_t value);

  private:
  ::int64_t _internal_span_id() const;
  void _internal_set_span_id(::int64_t value);

  public:
  // optional int64 parent_span_id = 8;
  bool has_parent_span_id() const;
  void clear_parent_span_id() ;
  ::int64_t parent_span_id() const;
  void set_parent_span_id(::int64_t value);

  private:
  ::int64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.NsheadMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr full_method_name_;
    ::google::protobuf::internal::ArenaStringPtr user_string_;
    ::int64_t correlation_id_;
    ::int64_t log_id_;
    ::int32_t attachment_size_;
    int compress_type_;
    ::int64_t trace_id_;
    ::int64_t span_id_;
    ::int64_t parent_span_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fnshead_5fmeta_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NsheadMeta

// required string full_method_name = 1;
inline bool NsheadMeta::has_full_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NsheadMeta::clear_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.full_method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NsheadMeta::full_method_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.full_method_name)
  return _internal_full_method_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NsheadMeta::set_full_method_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_method_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.full_method_name)
}
inline std::string* NsheadMeta::mutable_full_method_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_full_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.NsheadMeta.full_method_name)
  return _s;
}
inline const std::string& NsheadMeta::_internal_full_method_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.full_method_name_.Get();
}
inline void NsheadMeta::_internal_set_full_method_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_method_name_.Set(value, GetArena());
}
inline std::string* NsheadMeta::_internal_mutable_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.full_method_name_.Mutable( GetArena());
}
inline std::string* NsheadMeta::release_full_method_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.NsheadMeta.full_method_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.full_method_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_method_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NsheadMeta::set_allocated_full_method_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.full_method_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_method_name_.IsDefault()) {
          _impl_.full_method_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.NsheadMeta.full_method_name)
}

// optional int64 correlation_id = 2;
inline bool NsheadMeta::has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NsheadMeta::clear_correlation_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.correlation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t NsheadMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.correlation_id)
  return _internal_correlation_id();
}
inline void NsheadMeta::set_correlation_id(::int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.correlation_id)
}
inline ::int64_t NsheadMeta::_internal_correlation_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.correlation_id_;
}
inline void NsheadMeta::_internal_set_correlation_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.correlation_id_ = value;
}

// optional int64 log_id = 3;
inline bool NsheadMeta::has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NsheadMeta::clear_log_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t NsheadMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.log_id)
  return _internal_log_id();
}
inline void NsheadMeta::set_log_id(::int64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.log_id)
}
inline ::int64_t NsheadMeta::_internal_log_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_id_;
}
inline void NsheadMeta::_internal_set_log_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.log_id_ = value;
}

// optional int32 attachment_size = 4;
inline bool NsheadMeta::has_attachment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NsheadMeta::clear_attachment_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attachment_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t NsheadMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.attachment_size)
  return _internal_attachment_size();
}
inline void NsheadMeta::set_attachment_size(::int32_t value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.attachment_size)
}
inline ::int32_t NsheadMeta::_internal_attachment_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attachment_size_;
}
inline void NsheadMeta::_internal_set_attachment_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.attachment_size_ = value;
}

// optional .brpc.CompressType compress_type = 5;
inline bool NsheadMeta::has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NsheadMeta::clear_compress_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::brpc::CompressType NsheadMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.compress_type)
  return _internal_compress_type();
}
inline void NsheadMeta::set_compress_type(::brpc::CompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.compress_type)
}
inline ::brpc::CompressType NsheadMeta::_internal_compress_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::CompressType>(_impl_.compress_type_);
}
inline void NsheadMeta::_internal_set_compress_type(::brpc::CompressType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::CompressType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.compress_type_ = value;
}

// optional int64 trace_id = 6;
inline bool NsheadMeta::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NsheadMeta::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t NsheadMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.trace_id)
  return _internal_trace_id();
}
inline void NsheadMeta::set_trace_id(::int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.trace_id)
}
inline ::int64_t NsheadMeta::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void NsheadMeta::_internal_set_trace_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.trace_id_ = value;
}

// optional int64 span_id = 7;
inline bool NsheadMeta::has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NsheadMeta::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t NsheadMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.span_id)
  return _internal_span_id();
}
inline void NsheadMeta::set_span_id(::int64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.span_id)
}
inline ::int64_t NsheadMeta::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_;
}
inline void NsheadMeta::_internal_set_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.span_id_ = value;
}

// optional int64 parent_span_id = 8;
inline bool NsheadMeta::has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NsheadMeta::clear_parent_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_span_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t NsheadMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void NsheadMeta::set_parent_span_id(::int64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.parent_span_id)
}
inline ::int64_t NsheadMeta::_internal_parent_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_span_id_;
}
inline void NsheadMeta::_internal_set_parent_span_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.parent_span_id_ = value;
}

// optional bytes user_string = 9;
inline bool NsheadMeta::has_user_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NsheadMeta::clear_user_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NsheadMeta::user_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.user_string)
  return _internal_user_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NsheadMeta::set_user_string(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_string_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.user_string)
}
inline std::string* NsheadMeta::mutable_user_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_string();
  // @@protoc_insertion_point(field_mutable:brpc.NsheadMeta.user_string)
  return _s;
}
inline const std::string& NsheadMeta::_internal_user_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_string_.Get();
}
inline void NsheadMeta::_internal_set_user_string(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_string_.Set(value, GetArena());
}
inline std::string* NsheadMeta::_internal_mutable_user_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_string_.Mutable( GetArena());
}
inline std::string* NsheadMeta::release_user_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.NsheadMeta.user_string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.user_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_string_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NsheadMeta::set_allocated_user_string(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_string_.IsDefault()) {
          _impl_.user_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.NsheadMeta.user_string)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto_2epb_2eh
