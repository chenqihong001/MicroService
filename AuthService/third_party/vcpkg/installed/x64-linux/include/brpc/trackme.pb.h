// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/trackme.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_brpc_2ftrackme_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2ftrackme_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_brpc_2ftrackme_2eproto;
namespace brpc {
class TrackMeRequest;
struct TrackMeRequestDefaultTypeInternal;
extern TrackMeRequestDefaultTypeInternal _TrackMeRequest_default_instance_;
class TrackMeResponse;
struct TrackMeResponseDefaultTypeInternal;
extern TrackMeResponseDefaultTypeInternal _TrackMeResponse_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace brpc {
enum TrackMeSeverity : int {
  TrackMeOK = 0,
  TrackMeWarning = 1,
  TrackMeFatal = 2,
};

bool TrackMeSeverity_IsValid(int value);
extern const uint32_t TrackMeSeverity_internal_data_[];
constexpr TrackMeSeverity TrackMeSeverity_MIN = static_cast<TrackMeSeverity>(0);
constexpr TrackMeSeverity TrackMeSeverity_MAX = static_cast<TrackMeSeverity>(2);
constexpr int TrackMeSeverity_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TrackMeSeverity_descriptor();
template <typename T>
const std::string& TrackMeSeverity_Name(T value) {
  static_assert(std::is_same<T, TrackMeSeverity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrackMeSeverity_Name().");
  return TrackMeSeverity_Name(static_cast<TrackMeSeverity>(value));
}
template <>
inline const std::string& TrackMeSeverity_Name(TrackMeSeverity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackMeSeverity_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TrackMeSeverity_Parse(absl::string_view name, TrackMeSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackMeSeverity>(
      TrackMeSeverity_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TrackMeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TrackMeResponse) */ {
 public:
  inline TrackMeResponse() : TrackMeResponse(nullptr) {}
  ~TrackMeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrackMeResponse(::google::protobuf::internal::ConstantInitialized);

  inline TrackMeResponse(const TrackMeResponse& from)
      : TrackMeResponse(nullptr, from) {}
  TrackMeResponse(TrackMeResponse&& from) noexcept
    : TrackMeResponse() {
    *this = ::std::move(from);
  }

  inline TrackMeResponse& operator=(const TrackMeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackMeResponse& operator=(TrackMeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackMeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackMeResponse* internal_default_instance() {
    return reinterpret_cast<const TrackMeResponse*>(
               &_TrackMeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrackMeResponse& a, TrackMeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackMeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackMeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackMeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackMeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackMeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrackMeResponse& from) {
    TrackMeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackMeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.TrackMeResponse";
  }
  protected:
  explicit TrackMeResponse(::google::protobuf::Arena* arena);
  TrackMeResponse(::google::protobuf::Arena* arena, const TrackMeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kSeverityFieldNumber = 1,
    kNewIntervalFieldNumber = 3,
  };
  // optional string error_text = 2;
  bool has_error_text() const;
  void clear_error_text() ;
  const std::string& error_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_text(Arg_&& arg, Args_... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* value);

  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(
      const std::string& value);
  std::string* _internal_mutable_error_text();

  public:
  // optional .brpc.TrackMeSeverity severity = 1;
  bool has_severity() const;
  void clear_severity() ;
  ::brpc::TrackMeSeverity severity() const;
  void set_severity(::brpc::TrackMeSeverity value);

  private:
  ::brpc::TrackMeSeverity _internal_severity() const;
  void _internal_set_severity(::brpc::TrackMeSeverity value);

  public:
  // optional int32 new_interval = 3;
  bool has_new_interval() const;
  void clear_new_interval() ;
  ::int32_t new_interval() const;
  void set_new_interval(::int32_t value);

  private:
  ::int32_t _internal_new_interval() const;
  void _internal_set_new_interval(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.TrackMeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_text_;
    int severity_;
    ::int32_t new_interval_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2ftrackme_2eproto;
};// -------------------------------------------------------------------

class TrackMeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TrackMeRequest) */ {
 public:
  inline TrackMeRequest() : TrackMeRequest(nullptr) {}
  ~TrackMeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrackMeRequest(::google::protobuf::internal::ConstantInitialized);

  inline TrackMeRequest(const TrackMeRequest& from)
      : TrackMeRequest(nullptr, from) {}
  TrackMeRequest(TrackMeRequest&& from) noexcept
    : TrackMeRequest() {
    *this = ::std::move(from);
  }

  inline TrackMeRequest& operator=(const TrackMeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackMeRequest& operator=(TrackMeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackMeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackMeRequest* internal_default_instance() {
    return reinterpret_cast<const TrackMeRequest*>(
               &_TrackMeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackMeRequest& a, TrackMeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackMeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackMeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackMeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackMeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackMeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrackMeRequest& from) {
    TrackMeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackMeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "brpc.TrackMeRequest";
  }
  protected:
  explicit TrackMeRequest(::google::protobuf::Arena* arena);
  TrackMeRequest(::google::protobuf::Arena* arena, const TrackMeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddrFieldNumber = 2,
    kRpcVersionFieldNumber = 1,
  };
  // optional string server_addr = 2;
  bool has_server_addr() const;
  void clear_server_addr() ;
  const std::string& server_addr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_addr(Arg_&& arg, Args_... args);
  std::string* mutable_server_addr();
  PROTOBUF_NODISCARD std::string* release_server_addr();
  void set_allocated_server_addr(std::string* value);

  private:
  const std::string& _internal_server_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_addr(
      const std::string& value);
  std::string* _internal_mutable_server_addr();

  public:
  // optional int64 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version() ;
  ::int64_t rpc_version() const;
  void set_rpc_version(::int64_t value);

  private:
  ::int64_t _internal_rpc_version() const;
  void _internal_set_rpc_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:brpc.TrackMeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr server_addr_;
    ::int64_t rpc_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2ftrackme_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class TrackMeService_Stub;
class TrackMeService : public ::google::protobuf::Service {
 protected:
  TrackMeService() = default;

 public:
  using Stub = TrackMeService_Stub;

  TrackMeService(const TrackMeService&) = delete;
  TrackMeService& operator=(const TrackMeService&) = delete;
  virtual ~TrackMeService() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void TrackMe(::google::protobuf::RpcController* controller,
                        const ::brpc::TrackMeRequest* request,
                        ::brpc::TrackMeResponse* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class TrackMeService_Stub final : public TrackMeService {
 public:
  TrackMeService_Stub(::google::protobuf::RpcChannel* channel);
  TrackMeService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  TrackMeService_Stub(const TrackMeService_Stub&) = delete;
  TrackMeService_Stub& operator=(const TrackMeService_Stub&) = delete;

  ~TrackMeService_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TrackMeService ------------------------------------------
  void TrackMe(::google::protobuf::RpcController* controller,
                        const ::brpc::TrackMeRequest* request,
                        ::brpc::TrackMeResponse* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TrackMeRequest

// optional int64 rpc_version = 1;
inline bool TrackMeRequest::has_rpc_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrackMeRequest::clear_rpc_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpc_version_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TrackMeRequest::rpc_version() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.rpc_version)
  return _internal_rpc_version();
}
inline void TrackMeRequest::set_rpc_version(::int64_t value) {
  _internal_set_rpc_version(value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.rpc_version)
}
inline ::int64_t TrackMeRequest::_internal_rpc_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpc_version_;
}
inline void TrackMeRequest::_internal_set_rpc_version(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rpc_version_ = value;
}

// optional string server_addr = 2;
inline bool TrackMeRequest::has_server_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrackMeRequest::clear_server_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_addr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackMeRequest::server_addr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.server_addr)
  return _internal_server_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrackMeRequest::set_server_addr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_addr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.server_addr)
}
inline std::string* TrackMeRequest::mutable_server_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_addr();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeRequest.server_addr)
  return _s;
}
inline const std::string& TrackMeRequest::_internal_server_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_addr_.Get();
}
inline void TrackMeRequest::_internal_set_server_addr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_addr_.Set(value, GetArena());
}
inline std::string* TrackMeRequest::_internal_mutable_server_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.server_addr_.Mutable( GetArena());
}
inline std::string* TrackMeRequest::release_server_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.TrackMeRequest.server_addr)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.server_addr_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_addr_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrackMeRequest::set_allocated_server_addr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.server_addr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_addr_.IsDefault()) {
          _impl_.server_addr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeRequest.server_addr)
}

// -------------------------------------------------------------------

// TrackMeResponse

// optional .brpc.TrackMeSeverity severity = 1;
inline bool TrackMeResponse::has_severity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrackMeResponse::clear_severity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::brpc::TrackMeSeverity TrackMeResponse::severity() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.severity)
  return _internal_severity();
}
inline void TrackMeResponse::set_severity(::brpc::TrackMeSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.severity)
}
inline ::brpc::TrackMeSeverity TrackMeResponse::_internal_severity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::brpc::TrackMeSeverity>(_impl_.severity_);
}
inline void TrackMeResponse::_internal_set_severity(::brpc::TrackMeSeverity value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::brpc::TrackMeSeverity_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.severity_ = value;
}

// optional string error_text = 2;
inline bool TrackMeResponse::has_error_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrackMeResponse::clear_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackMeResponse::error_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.error_text)
  return _internal_error_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrackMeResponse::set_error_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.error_text)
}
inline std::string* TrackMeResponse::mutable_error_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeResponse.error_text)
  return _s;
}
inline const std::string& TrackMeResponse::_internal_error_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_text_.Get();
}
inline void TrackMeResponse::_internal_set_error_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(value, GetArena());
}
inline std::string* TrackMeResponse::_internal_mutable_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_text_.Mutable( GetArena());
}
inline std::string* TrackMeResponse::release_error_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:brpc.TrackMeResponse.error_text)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_text_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_text_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrackMeResponse::set_allocated_error_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_text_.IsDefault()) {
          _impl_.error_text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeResponse.error_text)
}

// optional int32 new_interval = 3;
inline bool TrackMeResponse::has_new_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrackMeResponse::clear_new_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_interval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TrackMeResponse::new_interval() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.new_interval)
  return _internal_new_interval();
}
inline void TrackMeResponse::set_new_interval(::int32_t value) {
  _internal_set_new_interval(value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.new_interval)
}
inline ::int32_t TrackMeResponse::_internal_new_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_interval_;
}
inline void TrackMeResponse::_internal_set_new_interval(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_interval_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::brpc::TrackMeSeverity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::brpc::TrackMeSeverity>() {
  return ::brpc::TrackMeSeverity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto_2epb_2eh
